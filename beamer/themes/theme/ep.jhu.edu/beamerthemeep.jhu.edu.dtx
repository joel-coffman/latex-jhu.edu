% \iffalse meta-comment
%
% Copyright (C) 2014 by Joel Coffman
% -----------------------------------
%
% This file may be distributed and/or modified under the
% conditions of the LaTeX Project Public License, either version 1.2
% of this license or (at your option) any later version.
% The latest version of this license is in:
%
%   http://www.latex-project.org/lppl.txt
%
% and version 1.2 or later is part of all distributions of LaTeX
% version 1999/12/01 or later.
%
% \fi
%
% \iffalse
%<package>\NeedsTeXFormat{LaTeX2e}
%<package>\ProvidesPackage{beamerthemeep.jhu.edu}
%<package>  [2021/10/29 v0.2.3 Beamer theme for Engineering for Professionals]
%
%<*driver>
\documentclass{ltxdoc}
\usepackage{beamerarticle}

\input{.version}
\usepackage{beamerthemeep.jhu.edu}

\usepackage{glossaries}
\usepackage{graphicx}
\usepackage{minted}

\usepackage{email}
\usepackage{theme-doc}

% glossaries
\loadglsentries{acronyms}

\EnableCrossrefs
\CodelineIndex
\RecordChanges
\begin{document}
  \DocInput{beamerthemeep.jhu.edu.dtx}
\end{document}
%</driver>
% \fi
%
% \CheckSum{0}
%
% \CharacterTable
% {Upper-case   \A\B\C\D\E\F\G\H\I\J\K\L\M\N\O\P\Q\R\S\T\U\V\W\X\Y\Z
% Lower-case    \a\b\c\d\e\f\g\h\i\j\k\l\m\n\o\p\q\r\s\t\u\v\w\x\y\z
% Digits        \0\1\2\3\4\5\6\7\8\9
% Exclamation   \!     Double quote  \"     Hash (number) \#
% Dollar        \$     Percent       \%     Ampersand     \&
% Acute accent  \'     Left paren    \(     Right paren   \)
% Asterisk      \*     Plus          \+     Comma         \,
% Minus         \-     Point         \.     Solidus       \/
% Colon         \:     Semicolon     \;     Less than     \<
% Equals        \=     Greater than  \>     Question mark \?
% Commercial at \@     Left bracket  \[     Backslash     \\
% Right bracket \]     Circumflex    \^     Underscore    \_
% Grave accent  \`     Left brace    \{     Vertical bar  \|
% Right brace   \}     Tilde         \~}
%
%
% \changes{0.1.0}{2015/02/16}{%
%   Initial version
% }
% \changes{0.1.1}{2016/02/19}{%
%   Correct package name in \mintinline{latex}{\ProvidesPackage} macro
% }
% \changes{0.2.0}{2021/07/26}{
%   Align theme with Microsoft PowerPoint template
% }
% \changes{0.2.2}{2021/10/14}{
%   Add support for notes
% }
% \changes{0.2.3}{2021/10/29}{
%   Use colors provided by bluejay color theme
% }
%
% \GetFileInfo{beamerthemeep.jhu.edu.sty}
%
% \DoNotIndex{\#,\$,\%,\&,\@,\\,\{,\},\^,\_,\~,\ }
% \DoNotIndex{\@ne}
% \DoNotIndex{\advance,\begingroup,\catcode,\closein}
% \DoNotIndex{\closeout,\day,\def,\edef,\else,\empty,\endgroup}
% \DoNotIndex{\global,\let,\relax}
%
% \title{
%   The \textsf{beamerthemeep.jhu.edu} package\thanks{%
%     This document corresponds to \protect\textsf{beamerthemeep.jhu.edu}~\fileversion-\version, dated \filedate.
%   }
% }
% \author{Joel Coffman\\\email{joel.coffman@jhu.edu}}
%
% \maketitle
%
% \begin{abstract}
% A Beamer theme for the Engineering for Professionals (EP) program at Johns Hopkins University.
% This theme follows the official Microsoft PowerPoint template to the greatest degree possible.
% \end{abstract}
%
% \StopEventually{
%   \PrintChanges
%   \PrintIndex
% }
%
% \section{Usage}
% Per Beamer's documentation, this color theme should be loaded via the following command:
% \begin{VerbatimOut}[
%     gobble=1,
% ]{minted/useroutertheme.out}
% \usetheme{ep.jhu.edu}
% \end{VerbatimOut}
% \inputminted[
%     gobble=1,
% ]{latex}{minted/useroutertheme.out}
%
% The following images illustrate the theme's style.
%
% \begin{figure}[!h]
%    \includegraphics[
%        page=1,
%        width=0.49\linewidth,
%    ]{example}
%    \hfill
%    \includegraphics[
%        page=2,
%        width=0.49\linewidth,
%    ]{example}
% \end{figure}
%
% \section{Issues}
%
% The following list summarizes known issues with this theme:
% \begin{itemize}
%   \item
%   The title page and end page do not display correctly when using Beamer's \textsf{show only notes} option due to a conflict with the implementation of Ti\textit{k}Z's \textsf{remember picture} option.\footnote{%
%     See \url{https://tex.stackexchange.com/a/369326} for more details.
%   }
%   While it likely possible to manually center the image, the colors---particularly gradients---would be difficult to reproduce without using Ti\textit{k}Z.
% \end{itemize}
%
% \appendix
%
% \iffalse
%<*package>
% \fi
%
% \section{Implementation}
% See Beamer's documentation and the implementation of various themes for more information about the color palettes and color commands.
%
% Themes are only used in \textsc{beamer}'s presentation mode.
% Some commands (e.g., executing options defined with \textsf{pgfkeys}) may fail when typesetting the theme's documentation if not ``protected'' by presentation mode.
%    \begin{macrocode}
\mode<presentation>
%    \end{macrocode}
%
% \subsection{Packages}
% Require the \textsf{epstopdf} package for \gls{EPS} images.
%    \begin{macrocode}
\RequirePackage{epstopdf}
%    \end{macrocode}
%
% Require the \textsf{pgfopts} package to parse package options.
%    \begin{macrocode}
\RequirePackage{pgfopts}
%    \end{macrocode}
%
% Require the \textsf{tikz} package to place graphics (e.g., logos) at specific locations in frames.
%    \begin{macrocode}
\RequirePackage{tikz}
%    \end{macrocode}
%
% Require the \textsf{xpatch} package to patch other packages.
%    \begin{macrocode}
\RequirePackage{xpatch}
%    \end{macrocode}
%
% Use \TeX{} Clear Sans as a substitute for Tahoma.
%    \begin{macrocode}
\RequirePackage[sfdefault]{ClearSans}
%    \end{macrocode}
% \changes{0.2.0}{2021/07/26}{
%   Use Clear Sans as the default typeface
% }
%
% Use the \textsf{bluejay} color theme, which defines colors in Johns Hopkins's official color palette.
%    \begin{macrocode}
\usecolortheme{bluejay}
%    \end{macrocode}
% \changes{0.1.2}{2016/10/06}{
%   Inherit from the engineering.jhu.edu theme
% }
%
% Use the \textsf{structurebold} font theme.
%    \begin{macrocode}
\usefonttheme{structurebold}
%    \end{macrocode}
%
% \subsection{Options}
%    \begin{macrocode}
\pgfkeys{
  /beamer/themes/theme/ep.jhu.edu/.cd,
  .search also={
  },
}
%    \end{macrocode}
%
% \subsection{Configuration}
% Patch \textsf{epstopdf} to search for \gls{EPS} images using \texttt{TEXINPUTS} (courtesy of \texttt{kpsewhich}).  ^^A https://bit.ly/3uuC3EP
%
%    \begin{macrocode}
\xpatchcmd{\ETE@epstopdf}{#1}{%
  `kpsewhich \space "\SourceFile"`
}{}{%
  \PackageWarning{beamerthemeep.jhu.edu}{%
      Unable to patch epstopdf to search for EPS images; place EPS
      images provided by theme in same directory as the document%
  }%
}%
%    \end{macrocode}
% \changes{0.2.1}{2021/09/30}{%
%   Patch epstopdf to search for images using kpsewhich
% }
%
% Use the EP logo.
%    \begin{macrocode}
\logo{%
  \includegraphics[
      clip,
      height=4ex,
      keepaspectratio,
      trim=40 40 40 40,  % left bottom right top
      width=\linewidth,
  ]{{whiting.logo.small.horizontal.black}.eps}%
}
%    \end{macrocode}
% \changes{0.1.3}{2017/01/02}{
%   Adjust width to match decreased width of logo (v0.1.3 of logo package)
% }
%
% Add document hook to insert the end page (with copyright) at the end of the presentation.
%    \begin{macrocode}
\AtEndDocument{%
  \frame[plain]{\usebeamertemplate{end page}}%
}
%    \end{macrocode}
%
% Set the default values for the options.
%    \begin{macrocode}
\pgfkeys{
  /beamer/themes/theme/ep.jhu.edu/.cd,
}
%    \end{macrocode}
% Process options.
%    \begin{macrocode}
\ProcessPgfOptions{/beamer/themes/theme/ep.jhu.edu}
%    \end{macrocode}
%
% \subsection{Lengths}
% Define lengths used in footline.
%    \begin{macrocode}
\newlength{\beamerthemeepjhuedu@footline@depth}
\setlength{\beamerthemeepjhuedu@footline@depth}{1.25ex}
%    \end{macrocode}
%
% \subsection{Colors}
% Define colors.
% Pantone 7683 C is the closest match to the web color used in the Microsoft PowerPoint template (\texttt{\#3b6faf}).
%    \begin{macrocode}
\definecolor{Pantone 7683 C}{HTML}{426DA9}
%    \end{macrocode}
%
% Define \textsc{beamer} colors.
%
% The \textsf{structure} color (and font) is used as the basis for many other colors, including the frame title and the headings of blocks.
%    \begin{macrocode}
\setbeamercolor{structure}{
  fg=Heritage Blue,
}
%    \end{macrocode}
%
% Special care is taken to ensure that the title page and end page remain visible when using Beamer's \textsf{show only notes} option (in which case |\ifbeamer@notesnormals| is false and the colors specified by \textsf{color} are used).
% ^^A TODO: Inherit from structure (or another color palette)
%    \begin{macrocode}
\ifbeamer@notesnormals
  \setbeamercolor{author}{
    fg=white,
  }
  \setbeamercolor{copyright}{
    fg=white,
  }
  \setbeamercolor{date}{
    fg=white,
  }
  \setbeamercolor{institute}{
    fg=white,
  }
  \setbeamercolor{page number in head/foot}{
    fg=black,
  }
  \setbeamercolor{subtitle}{
    fg=white,
  }
  \setbeamercolor{title}{
    fg=white,
  }
\else
  \setbeamercolor{copyright}{
    use=structure,
    fg=structure.fg,
  }
\fi% END beamer@notesnormals
%    \end{macrocode}
%    \begin{macrocode}
\setbeamercolor{note date}{
  fg=white,
}
\setbeamercolor{note page}{
  bg=PMS Black 4 C!10,
}
\setbeamercolor{note title}{
  bg=PMS 285 C,
  fg=white,
}
%    \end{macrocode}
%
% \subsection{Fonts}
% Define \textsc{beamer} fonts:
%    \begin{macrocode}
\setbeamerfont{block title}{
  size=\large,
}
\setbeamerfont{copyright}{
  size=\scriptsize,
}
\setbeamerfont{frametitle}{
  size=\LARGE,
}
\setbeamerfont{title}{
  size=\huge,
}
\setbeamerfont{subtitle}{
  series=\mdseries,
  size=\Large,
}
%    \end{macrocode}
%
% \subsection{Templates}
% Define \textsc{beamer} templates used by this presentation theme.
%
% \subsubsection{Copyright}
%    \begin{macrocode}
\defbeamertemplate*{copyright}{ep.jhu.edu}[1][]{%
  \vskip0pt plus 1filll%
  \centering%
  {%
    \usebeamercolor[fg]{copyright}%
    \usebeamerfont{copyright}%
    \textcopyright{} The Johns Hopkins University \the\year.
    All Rights Reserved.
  }
  \vskip2ex%
}
%    \end{macrocode}
%
% \subsubsection{End Page}
% The end page is loosely analogous to the title page of the presentation, but appears as the final slide.
% Due to the structure of the end page, the \texttt{plain} option should always be specified for the frame.\footnote{
%   The footline cannot simply be hidden, partly due to the height not being recalculated when it ``disappears'' from a single frame (see \url{https://topanswers.xyz/tex?q=1397\#a1642}).
% }
%    \begin{macrocode}
\defbeamertemplate*{end page}{ep.jhu.edu}[1][]{%
%    \end{macrocode}
% Suppress the headline, footline, and sidebars on the current frame by manually setting the corresponding key.
% This approach may not be generalizable (e.g., if the theme has a headline, then setting this key inside this template is likely too late to have the desired effect), but works well for the \textsf{default} outer theme that does not define a headline, footline, or left sidebar.
%    \begin{macrocode}
  \global\beamer@plainframetrue%
%    \end{macrocode}
% Suppress the image when using Beamer's \textsf{show only notes} option, as it will not be visible.
% ^^A TODO: Substitute another (non-white) logo
%    \begin{macrocode}
  \ifbeamer@notesnormals%
    \begin{tikzpicture}[
        overlay,
        remember picture,
    ]
      \node at (current page.center) {
        \includegraphics[
            height=\paperheight,
            keepaspectratio,
            width=\paperwidth,
        ]{GilmanHall}
      };
      \shade[
          left color=Spirit Blue,
          opacity=0.85,
          right color=Pantone 7683 C,
      ] (current page.north west) rectangle (current page.south east)+(-0.25\paperwidth,0);
      \node at (current page.center) {
        \includegraphics[
            width=0.6\paperwidth,
        ]{{whiting.logo.small.vertical.white}.eps}
      };
    \end{tikzpicture}%
  \fi% END beamer@notesnormals
  \usebeamertemplate{copyright}%
}
%    \end{macrocode}
%
% \subsubsection{Frame Title}
% Add rule underneath the frame title.
%    \begin{macrocode}
\defbeamertemplate*{frametitle}{ep.jhu.edu}{%
  \vskip2ex%
  \insertframetitle%
  \par%
  {\color{Spirit Blue}\rule{2em}{0.5ex}}%
}
%    \end{macrocode}
%
% \subsubsection{Footline}
% Customize the footline with the logo and frame number.
%    \begin{macrocode}
\defbeamertemplate*{footline}{ep.jhu.edu}{%
  \ifbeamer@plainframe%
  \else%
    \leavevmode%
    \hbox{%
      \begin{beamercolorbox}[
          dp=\beamerthemeepjhuedu@footline@depth,
          left,
          leftskip=\Gm@lmargin,  % https://tex.stackexchange.com/a/198224
          wd=0.33\textwidth,
      ]{logo in head/foot}%
        \insertlogo%
      \end{beamercolorbox}%
      \begin{beamercolorbox}[
          wd=0.34\textwidth,
      ]{}%
      \end{beamercolorbox}%
      \begin{beamercolorbox}[
          dp=\beamerthemeepjhuedu@footline@depth,
          right,
          rightskip=\Gm@rmargin,  % https://tex.stackexchange.com/a/198224
          wd=0.33\textwidth,
      ]{page number in head/foot}%
        \vbox to 4ex{% https://tex.stackexchange.com/a/49617
          \vfil%
          \insertframenumber%
          \vfil%
        }%
      \end{beamercolorbox}%
    }%
    \vskip0pt%
  \fi%
}
%    \end{macrocode}
%
% \subsubsection{Sidebar Right}
% Omit the logo (as compared to the \textsf{default} outer theme).\footnote{\url{https://github.com/josephwright/beamer/blob/d6af506/base/themes/outer/beamerouterthemedefault.sty\#L121}}.
%    \begin{macrocode}
\defbeamertemplate*{sidebar right}{ep.jhu.edu}{%
  \vfill%
  \llap{\usebeamertemplate***{navigation symbols}\hskip0.1cm}%
  \vskip2pt%
}
%    \end{macrocode}
%
% \subsubsection{Title Page}
% The title page template features Gilman Hall in the background with the Whiting School of Engineering logo prominently displayed in the top left corner.
%    \begin{macrocode}
\defbeamertemplate*{title page}{ep.jhu.edu}[1][]{%
%    \end{macrocode}
% Suppress the headline, footline, and sidebars on the current frame by manually setting the corresponding key.
% This approach may not be generalizable (e.g., if the theme has a headline, then setting this key inside this template is likely too late to have the desired effect), but works well for the \textsf{default} outer theme that does not define a headline, footline, or left sidebar.
%    \begin{macrocode}
  \global\beamer@plainframetrue%
%    \end{macrocode}
% Suppress the background image and color when using Beamer's \textsf{show only notes} option, as they will not display correctly.
% ^^A TODO: Substitute another (non-white) logo
%    \begin{macrocode}
  \ifbeamer@notesnormals%
%    \end{macrocode}
% Use a \texttt{tikzpicture} to specify the placement of background elements and the Whiting School of Engineering logo.
%    \begin{macrocode}
    \begin{tikzpicture}[
        overlay,
        remember picture,
    ]
%    \end{macrocode}
% Insert the image of Gilman Hall.
%    \begin{macrocode}
      \node at (current page.center) {
        \includegraphics[
            height=\paperheight,
            keepaspectratio,
            width=\paperwidth,
        ]{GilmanHall}
      };
%    \end{macrocode}
% Use a blue background for the entire slide.
%    \begin{macrocode}
      \fill[
          Heritage Blue,
          opacity=0.85,
      ] (current page.north west) rectangle (current page.south east);
%    \end{macrocode}
% Insert the Whiting School of Engineering logo.
%    \begin{macrocode}
      \node[
          anchor=north east
      ] at (current page.north east) {
        \includegraphics[
            width=0.33\paperwidth,
        ]{{whiting.logo.small.horizontal.white}.eps}
      };
%    \end{macrocode}
%    \begin{macrocode}
    \end{tikzpicture}%
%    \end{macrocode}
%    \begin{macrocode}
  \fi% END beamer@notesnormals
%    \end{macrocode}
% Insert vertical space so that the title appears (loosely) in the middle of the frame.
%    \begin{macrocode}
  \vskip0.34\paperheight
%    \end{macrocode}
% The following code follows the definition of the title page template in the \textsf{default} inner theme.\footnote{\url{https://github.com/josephwright/beamer/blob/d6af506/base/themes/inner/beamerinnerthemedefault.sty\#L38}}.
%    \begin{macrocode}
  \begingroup
    \begin{beamercolorbox}[sep=8pt,#1]{title}
      \usebeamerfont{title}\inserttitle\par%
      \ifx\insertsubtitle\@empty%
      \else%
        {%
          \usebeamerfont{subtitle}%
          \usebeamercolor[fg]{subtitle}%
          \insertsubtitle%
          \par%
        }%
      \fi%
    \end{beamercolorbox}%
    \ifx\insertauthor\@empty%
    \else%
      \begin{beamercolorbox}[sep=8pt,#1]{author}
        \usebeamerfont{author}\insertauthor
      \end{beamercolorbox}
    \fi%
    \ifx\insertinstitute\@empty%
    \else%
      \begin{beamercolorbox}[sep=8pt,#1]{institute}
        \usebeamerfont{institute}\insertinstitute
      \end{beamercolorbox}
    \fi%
    \ifx\insertdate\@empty%
    \else%
      \begin{beamercolorbox}[sep=8pt,#1]{date}
        \usebeamerfont{date}\insertdate
      \end{beamercolorbox}
    \fi%
    {%
      \usebeamercolor[fg]{titlegraphic}%
      \inserttitlegraphic%
      \par
    }%
  \endgroup
  \vskip0pt plus 1filll  % https://tex.stackexchange.com/a/64759
%    \end{macrocode}
%    \begin{macrocode}
}
%    \end{macrocode}
%
% End presentation mode.
%    \begin{macrocode}
\mode
<all>
%    \end{macrocode}
%
% \iffalse
%</package>
% \fi
%
% \Finale
%
%\iffalse
%<*whiting.logo.small.horizontal.black.eps>
%
%<<whiting.logo.small.horizontal.black.eps
%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: whiting.logo.small.horizontal.black.eps
%%Creator: Adobe Illustrator(R) 16.0
%%For: Eric Conrad
%%CreationDate: 3/31/14
%%BoundingBox: 0 0 313 142
%%HiResBoundingBox: 0 0 313 142
%%CropBox: 0 0 313 142
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%%Pages: 1
%%DocumentNeededResources:
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts:
%%DocumentNeededFonts:
%%DocumentNeededFeatures:
%%DocumentSuppliedFeatures:
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors:
%%CMYKCustomColor:
%%RGBCustomColor:
%%EndComments






%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf
{load def}bdf
/ddf
{put}bdf
/xddf
{3 -1 roll put}bdf
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2
	ps_level 2 ge
def
/level3
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
			/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def
			imageDict begin
			/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
				0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or
	{
		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if
		}
		{
		/DataSource load type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
		1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse
	/AGMCORE_avoid_L2_sep_space
		version cvr 2012 lt
		level2 and
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots
		userdict/Adobe_AGM_OnHost_Seps known
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
				AGMCORE_magenta_plate{
					4 3 roll pop pop pop
				}{
					AGMCORE_yellow_plate{
						4 2 roll pop pop pop
					}{
						4 1 roll pop pop pop
					}ifelse
				}ifelse
			}ifelse
			settransfer
		}
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
				AGMCORE_magenta_plate{
					{4 3 roll pop pop pop}
				}{
					AGMCORE_yellow_plate{
						{4 2 roll pop pop pop}
					}{
						{4 1 roll pop pop pop}
					}ifelse
				}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse
						}if
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name
										CSA map_csa
										MappedCSA
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop
		ColorSpaceFamily/Separation eq
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq
		currentdict/Components known and
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
			AGMCORE_host_sep Name(All)eq and{
				/TintProc{
					1 exch sub setseparationgray
				}bdf
			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
						/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
								/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1
		0 1 numarrays 1 sub
			{
			1 exch add/index cvx
			c1/get cvx/mul cvx
			}for
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def
			}{
				/name xdf
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
			TintMethod/Subtractive eq
				{
				subtractive_blend
				}{
				additive_blend
				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put
	end
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
				Intent findcolorrendering
				{
					/ColorRendering findresource true exch
				}
				{
					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
				}ifelse
				dup Intent/AbsoluteColorimetric eq
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if
		0 exch rlineto
		currentfile token pop dup type/stringtype eq
			{pop exit}if
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
		AGMCORE_distilling{
			erasepage
		}{
			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
	/PrepsDict where
		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }  	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
									1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
										1 AGMCORE_&setgray
										currentdict imageormask_sys
									}{
										currentdict ignoreimagedata
									}ifelse
								}ifelse
							}{
								MultipleDataSources NComponents AGMIMG_&colorimage
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
									}if
								}if
								1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
		AGMIMG_ccimage_exists
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and
		Name()ne and
		Name(All)ne and
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
							AGMCORE_is_cmyk_sep Name(All)ne and{
								level2{
									Name AGMCORE_IsSeparationAProcessColor
									{
										Operator/imagemask eq{
											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
											}if
										}{
											invert_image_samples
										}ifelse
									}{
										//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
											[/Separation Name[/DeviceGray]
											{
												sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
											}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
									}ifelse
									currentdict imageormask_sys
								}{
									currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
								}ifelse
							}{
								Operator/imagemask ne{
									invert_image_samples
								}if
								currentdict imageormask_sys
							}ifelse
						}{
							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys
								}{
								currentoverprint not
									{
									gsave
									knockout_unitsq
									grestore
									}if
								currentdict consumeimagedata
							}ifelse
						}ifelse
					}ifelse
				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint
					MappedCSA 0 get/DeviceCMYK eq and
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
						currentdict imageormask_sys
					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
							currentdict imageormask_sys
						}{
							gsave
							knockout_unitsq
							grestore
							currentdict consumeimagedata
						}ifelse
					}ifelse
				}
				{
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
						Operator/imagemask ne{
							MultipleDataSources{
								/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
							}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
							}ifelse
							invert_image_samples
						}if
						currentdict imageormask_sys
					}{
						currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys
							}{
							currentoverprint not
								{
								gsave
								knockout_unitsq
								grestore
								}if
							currentdict consumeimagedata
						}ifelse
					}ifelse
				}ifelse
			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{
			currentcmykcolor
			/AGMIMG_k xdf
			/AGMIMG_y xdf
			/AGMIMG_m xdf
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor
			}{
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if
						}
					]
					255
					{
						255 div
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark
		currentdict
		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
						indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
						}if
						currentdict consumeimagedata
					}ifelse
				}{
					AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
						}if
						currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for
			put	setcolorspace
		}if
		currentdict
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
	dup type/dicttype ne{
		10 dict begin
			/DataSource xdf
			/ImageMatrix xdf
			/BitsPerComponent xdf
			/Height xdf
			/Width xdf
			/ImageType 1 def
			/Decode[0 1 def]
			currentdict
		end
	}if
	dup begin
		/NComponents 1 cdndf
		/MultipleDataSources false cdndf
		/SkipImageProc{false}cdndf
		/Decode[
				0
				currentcolorspace 0 get/Indexed eq{
					2 BitsPerComponent exp 1 sub
				}{
					1
				}ifelse
		]cdndf
		/Operator/image cdndf
	end
	/sep_colorspace_dict AGMCORE_gget null eq{
		imageormask
	}{
		gsave
		dup begin invert_image_samples end
		sep_imageormask
		grestore
	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get
			255 exch sub
			2 index
			3 1 roll
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage
		end
	}def
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf
					Adobe_AGM_Image/AGMIMG_y xddf
					Adobe_AGM_Image/AGMIMG_m xddf
					Adobe_AGM_Image/AGMIMG_c xddf
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf
				Adobe_AGM_Image/AGMIMG_y xddf
				Adobe_AGM_Image/AGMIMG_m xddf
				Adobe_AGM_Image/AGMIMG_c xddf
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -142 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 142 li
313 142 li
313 0 li
cp
clp
gsave
42.875 86.3691 mo
83.126 86.3691 li
83.126 43.002 li
42.875 43.002 li
42.875 86.3691 li
cp
clp
63.8779 86.0215 mo
64.939 85.4355 66.2183 84.6279 67.603 83.583 cv
67.603 71.0508 li
63.8779 68.5723 li
63.8779 86.0215 li
cp
false sop
/0
[/DeviceCMYK] /CSA add_res
.75021 .679683 .670222 .90164 cmyk
f
63.8779 59.8955 mo
67.603 62.3755 li
67.603 56.0425 li
66.3633 55.9844 65.1211 55.9512 63.8779 55.9414 cv
63.8779 59.8955 li
cp
f
75.0562 56.7007 mo
73.8179 56.542 72.5762 56.4126 71.3291 56.3037 cv
71.3291 64.855 li
75.0562 67.3359 li
75.0562 56.7007 li
cp
f
71.3296 73.5313 mo
71.3296 80.3467 li
72.5825 79.1016 73.8442 77.6602 75.0566 76.0215 cv
75.0566 76.0098 li
71.3296 73.5313 li
cp
f
75.0562 76.0215 mo
75.0581 76.0195 75.0591 76.0176 75.061 76.0117 cv
75.0562 76.0098 li
75.0562 76.0215 li
cp
f
78.7778 57.2627 mo
78.7778 69.8145 li
78.7886 69.8203 li
80.4136 66.4546 81.7246 62.5264 82.4629 57.9585 cv
82.3359 57.9336 li
81.1577 57.6865 79.9697 57.4653 78.7778 57.2627 cv
f
67.605 62.3779 mo
67.605 71.0527 li
71.3296 73.5303 li
71.3296 64.8555 li
67.605 62.3779 li
cp
f
75.0562 67.3359 mo
75.0562 76.0098 li
75.061 76.0117 li
76.3931 74.2109 77.6592 72.1582 78.7778 69.8398 cv
78.7778 69.8149 li
75.0562 67.3359 li
cp
f
78.7778 69.8398 mo
78.7827 69.8335 78.7856 69.8257 78.7886 69.8198 cv
78.7778 69.8149 li
78.7778 69.8398 li
cp
f
55.7041 71.6172 mo
56.8042 71.3115 57.771 70.6992 58.5112 69.8711 cv
58.105 69.7241 57.6313 69.5781 57.083 69.457 cv
56.6782 70.3569 56.168 71.0762 55.7041 71.6172 cv
f
49.793 69.873 mo
50.5332 70.7007 51.5029 71.3154 52.604 71.6191 cv
52.1401 71.0762 51.6289 70.3569 51.2231 69.4551 cv
50.6743 69.5781 50.2002 69.7251 49.793 69.873 cv
f
53.6123 60.8369 mo
53.2075 61.2817 52.7334 61.9087 52.3384 62.7007 cv
52.7373 62.7539 53.1616 62.7905 53.6123 62.8066 cv
53.6123 60.8369 li
cp
f
57.459 68.4414 mo
58.1313 68.5991 58.7041 68.7871 59.1714 68.9722 cv
59.6094 68.2402 59.895 67.4121 59.9771 66.5195 cv
57.8042 66.5195 li
57.7603 67.2144 57.6372 67.8574 57.459 68.4414 cv
f
52.6035 60.3457 mo
51.5024 60.6484 50.5337 61.2646 49.7925 62.0923 cv
50.2007 62.2393 50.6738 62.3857 51.2227 62.5073 cv
51.6284 61.6074 52.1396 60.8877 52.6035 60.3457 cv
f
58.5107 62.0923 mo
57.772 61.2656 56.8037 60.6504 55.7041 60.3477 cv
56.168 60.8896 56.6797 61.6094 57.084 62.5073 cv
57.6318 62.3857 58.106 62.2383 58.5107 62.0923 cv
f
57.8037 65.4453 mo
59.9766 65.4453 li
59.895 64.5532 59.6099 63.7231 59.1709 62.9922 cv
58.7036 63.1763 58.1318 63.3643 57.459 63.522 cv
57.6367 64.1069 57.7598 64.749 57.8037 65.4453 cv
f
54.6875 71.1328 mo
55.0938 70.6875 55.5728 70.0605 55.9697 69.2637 cv
55.5684 69.2109 55.1406 69.1738 54.6875 69.1558 cv
54.6875 71.1328 li
cp
f
53.6123 66.5195 mo
51.5796 66.5195 li
51.6265 67.1421 51.7485 67.7144 51.9194 68.2363 cv
52.4395 68.1563 53.0044 68.1035 53.6123 68.0815 cv
53.6123 66.5195 li
cp
f
54.6875 68.082 mo
55.2974 68.103 55.8667 68.1558 56.3887 68.2358 cv
56.5586 67.7148 56.6816 67.1426 56.7275 66.52 cv
54.6875 66.52 li
54.6875 68.082 li
cp
f
55.9736 62.7007 mo
55.5767 61.8999 55.0957 61.269 54.6875 60.8257 cv
54.6875 62.8057 li
55.1426 62.791 55.5728 62.7539 55.9736 62.7007 cv
f
56.7275 65.4453 mo
56.6816 64.8213 56.5605 64.248 56.3906 63.7271 cv
55.8677 63.8062 55.2988 63.8613 54.6875 63.8833 cv
54.6875 65.4453 li
56.7275 65.4453 li
cp
f
52.3379 69.2637 mo
52.7339 70.0527 53.207 70.6797 53.6118 71.127 cv
53.6118 69.1567 li
53.1611 69.1753 52.7368 69.2104 52.3379 69.2637 cv
f
50.8477 63.522 mo
50.1729 63.3643 49.6006 63.1763 49.1309 62.9922 cv
48.6958 63.7231 48.4097 64.5532 48.3267 65.4453 cv
50.5029 65.4453 li
50.5469 64.749 50.6699 64.1074 50.8477 63.522 cv
f
53.6123 63.8828 mo
53.0044 63.8618 52.4395 63.8066 51.9194 63.7275 cv
51.7485 64.2485 51.6265 64.8208 51.5796 65.4448 cv
53.6123 65.4448 li
53.6123 63.8828 li
cp
f
50.5029 66.5195 mo
48.3271 66.5195 li
48.4102 67.4121 48.6948 68.2402 49.1309 68.9722 cv
49.6011 68.7871 50.1729 68.5991 50.8481 68.4395 cv
50.6699 67.8574 50.5469 67.2144 50.5029 66.5195 cv
f
54.1504 59.0552 mo
57.9707 59.0552 61.0786 62.1626 61.0786 65.9824 cv
61.0786 69.7983 57.9707 72.9082 54.1504 72.9082 cv
50.3315 72.9082 47.2246 69.7983 47.2246 65.9824 cv
47.2246 62.1626 50.3315 59.0552 54.1504 59.0552 cv
43.5376 57.9653 mo
46.2725 74.8672 56.8535 83.1152 62.1235 86.0215 cv
62.1235 55.9414 li
55.8945 55.9995 49.6885 56.6665 43.6665 57.9375 cv
43.5376 57.9653 li
cp
f
77.9712 53.6919 mo
73.126 52.772 67.5601 52.4902 63.002 52.4902 cv
62.998 52.4902 li
58.4399 52.4902 52.873 52.772 48.0303 53.6919 cv
47.8472 53.729 47.6851 53.562 47.7861 53.3682 cv
50.9731 46.332 li
51.0049 46.2671 53.064 45.248 53.064 45.248 cv
55.6812 44.6982 59.9893 44.9399 62.9951 46.0459 cv
63.0059 46.0459 li
66.0122 44.9399 70.3193 44.6982 72.936 45.248 cv
72.936 45.248 74.9941 46.2671 75.0273 46.332 cv
78.2119 53.3682 li
78.3149 53.562 78.1543 53.729 77.9712 53.6919 cv
82.3232 45.0439 mo
82.3091 45.0371 li
76.0801 43.708 69.6221 43.002 63 43.002 cv
56.3682 43.002 49.9023 43.71 43.668 45.0439 cv
43.6411 45.0508 li
43.2012 45.1602 42.875 45.5571 42.875 46.0322 cv
42.877 49.5259 li
42.877 51.8208 43.0161 53.9868 43.2671 56.041 cv
49.7412 54.6709 56.3799 53.9868 63.0181 53.9868 cv
69.6479 53.9868 76.2773 54.6709 82.7363 56.0352 cv
82.9839 53.9849 83.124 51.8188 83.124 49.5259 cv
83.125 46.0322 li
83.125 45.5449 82.7813 45.1382 82.3232 45.0439 cv
f
72.1069 46.4546 mo
73.4468 50.0425 li
70.3247 49.6138 67.7378 49.8086 63.9185 51.0596 cv
63.9185 51.3955 li
67.5278 51.2598 72.0918 51.0586 75.7817 51.8516 cv
73.7705 47.2266 li
72.1069 46.4546 li
cp
f
52.5107 50.0425 mo
53.8506 46.4546 li
52.188 47.2275 li
50.1768 51.8525 li
53.8647 51.0586 58.4297 51.2598 62.0376 51.3965 cv
62.0376 51.0605 li
58.2197 49.8086 55.6318 49.6138 52.5107 50.0425 cv
f
grestore
gsave
89.875 72.498 mo
269.875 72.498 li
269.875 47.917 li
89.875 47.917 li
89.875 72.498 li
cp
clp
95.0239 52.3281 mo
95.0239 49.1689 94.7397 48.8281 93.061 48.6851 cv
92.3511 48.6289 li
92.1787 48.5151 92.2358 48.0029 92.4067 47.918 cv
94.0571 47.9741 95.0239 48.0029 96.2188 48.0029 cv
97.3569 48.0029 98.3237 47.9741 99.4619 47.918 cv
99.6328 48.0029 99.6899 48.5151 99.52 48.6289 cv
99.0928 48.6851 li
97.4141 48.9141 97.3569 49.3101 97.3569 52.3281 cv
97.3569 62.8833 li
97.3569 65.1289 97.2427 67.0923 96.7031 68.3999 cv
95.7637 70.6782 93.7441 72.498 91.0977 72.498 cv
90.7568 72.498 89.875 72.4688 89.875 71.9004 cv
89.875 71.416 90.3008 70.5903 90.8989 70.5903 cv
91.2397 70.5903 91.582 70.646 91.9517 70.7622 cv
92.3511 70.875 92.748 70.9609 93.147 70.9609 cv
93.7441 70.9609 94.0859 70.6191 94.2847 70.2212 cv
94.939 68.8833 95.0239 64.6172 95.0239 63.0801 cv
95.0239 52.3281 li
cp
false sop
.75021 .679683 .670222 .90164 cmyk
f
113.931 59.5313 mo
113.931 55.5723 112.18 51.2993 107.596 51.2993 cv
105.099 51.2993 101.86 53.0044 101.86 58.2603 cv
101.86 61.8101 103.588 66.4204 108.314 66.4204 cv
111.196 66.4204 113.931 64.2603 113.931 59.5313 cv
99.4585 59.0273 mo
99.4585 54.228 103.06 50.5552 108.003 50.5552 cv
113.547 50.5552 116.331 54.563 116.331 58.7871 cv
116.331 63.6353 112.636 67.1621 108.003 67.1621 cv
102.676 67.1621 99.4585 63.3472 99.4585 59.0273 cv
f
121.783 59.0273 mo
120.631 59.0273 120.583 59.0762 120.583 59.7974 cv
120.583 63.1792 li
120.583 65.6992 120.703 66.0352 122.046 66.1792 cv
122.742 66.2524 li
122.887 66.3472 122.838 66.7793 122.695 66.8511 cv
121.399 66.8022 120.583 66.7793 119.646 66.7793 cv
118.615 66.7793 117.798 66.8281 116.863 66.8511 cv
116.719 66.7793 116.671 66.3945 116.815 66.2524 cv
117.223 66.1792 li
118.566 65.9395 118.615 65.6992 118.615 63.1792 cv
118.615 54.5391 li
118.615 52.0195 118.447 51.6123 117.199 51.5151 cv
116.575 51.4673 li
116.43 51.3711 116.479 50.9395 116.622 50.8672 cv
117.798 50.8901 118.615 50.9395 119.646 50.9395 cv
120.583 50.9395 121.399 50.9165 122.43 50.8672 cv
122.575 50.9395 122.623 51.3711 122.478 51.4673 cv
122.022 51.5151 li
120.631 51.6592 120.583 52.0195 120.583 54.5391 cv
120.583 57.3003 li
120.583 58.0435 120.631 58.0684 121.783 58.0684 cv
128.647 58.0684 li
129.799 58.0684 129.847 58.0435 129.847 57.3003 cv
129.847 54.5391 li
129.847 52.0195 129.799 51.6592 128.383 51.5151 cv
127.927 51.4673 li
127.783 51.3711 127.831 50.9395 127.975 50.8672 cv
129.079 50.9165 129.894 50.9395 130.878 50.9395 cv
131.815 50.9395 132.631 50.9165 133.711 50.8672 cv
133.854 50.9395 133.903 51.3711 133.759 51.4673 cv
133.255 51.5151 li
131.863 51.6592 131.815 52.0195 131.815 54.5391 cv
131.815 63.1792 li
131.815 65.6992 131.863 66.0112 133.255 66.1792 cv
133.831 66.2524 li
133.974 66.3472 133.927 66.7793 133.782 66.8511 cv
132.631 66.8022 131.815 66.7793 130.878 66.7793 cv
129.894 66.7793 129.031 66.8022 127.975 66.8511 cv
127.831 66.7793 127.783 66.3945 127.927 66.2524 cv
128.383 66.1792 li
129.847 65.9395 129.847 65.6992 129.847 63.1792 cv
129.847 59.7974 li
129.847 59.0762 129.799 59.0273 128.647 59.0273 cv
121.783 59.0273 li
cp
f
150.224 62.6992 mo
150.224 63.4204 150.224 66.2754 150.296 66.8984 cv
150.248 67.043 150.104 67.1621 149.841 67.1621 cv
149.552 66.7563 148.856 65.916 146.768 63.5391 cv
141.2 57.2031 li
140.552 56.459 138.92 54.4912 138.416 53.9653 cv
138.369 53.9653 li
138.272 54.2524 138.248 54.8032 138.248 55.5234 cv
138.248 60.7563 li
138.248 61.8833 138.272 65.0044 138.68 65.7222 cv
138.825 65.9883 139.305 66.1313 139.904 66.1792 cv
140.648 66.2524 li
140.793 66.4434 140.768 66.7324 140.6 66.8511 cv
139.52 66.8032 138.68 66.7793 137.793 66.7793 cv
136.784 66.7793 136.136 66.8032 135.296 66.8511 cv
135.129 66.7324 135.105 66.394 135.248 66.2524 cv
135.896 66.1792 li
136.448 66.1074 136.832 65.9634 136.953 65.6992 cv
137.288 64.8364 137.265 61.9082 137.265 60.7563 cv
137.265 53.8203 li
137.265 53.147 137.241 52.6421 136.736 52.0923 cv
136.4 51.7563 135.825 51.5874 135.248 51.5151 cv
134.84 51.4683 li
134.696 51.3242 134.696 50.9653 134.889 50.8672 cv
135.896 50.9395 137.169 50.9395 137.6 50.9395 cv
137.984 50.9395 138.392 50.916 138.704 50.8672 cv
139.184 52.0923 142.016 55.2603 142.808 56.1484 cv
145.136 58.7632 li
146.792 60.6113 147.968 61.9551 149.096 63.1074 cv
149.144 63.1074 li
149.24 62.9883 149.24 62.603 149.24 62.0991 cv
149.24 56.9634 li
149.24 55.835 149.216 52.7163 148.761 51.9951 cv
148.616 51.7793 148.232 51.6353 147.272 51.5151 cv
146.864 51.4683 li
146.696 51.3242 146.72 50.9395 146.912 50.8672 cv
148.016 50.916 148.833 50.9395 149.744 50.9395 cv
150.776 50.9395 151.399 50.916 152.216 50.8672 cv
152.408 50.9883 152.408 51.3242 152.265 51.4683 cv
151.929 51.5151 li
151.161 51.6353 150.68 51.8281 150.584 52.019 cv
150.176 52.8833 150.224 55.8594 150.224 56.9634 cv
150.224 62.6992 li
cp
f
156.568 67.1621 mo
154.551 67.1621 153.28 66.5391 152.824 66.2749 cv
152.536 65.7461 152.224 64.043 152.175 62.916 cv
152.296 62.7461 152.656 62.6992 152.752 62.8442 cv
153.111 64.0659 154.095 66.4199 156.879 66.4199 cv
158.896 66.4199 159.88 65.0991 159.88 63.6602 cv
159.88 62.603 159.664 61.4282 157.911 60.2993 cv
155.631 58.8101 li
154.432 58.019 153.04 56.6499 153.04 54.6831 cv
153.04 52.4033 154.816 50.5562 157.936 50.5562 cv
158.68 50.5562 159.544 50.7002 160.168 50.8672 cv
160.479 50.9653 160.815 51.0122 161.007 51.0122 cv
161.223 51.5869 161.439 52.9321 161.439 53.939 cv
161.344 54.084 160.959 54.1553 160.839 54.0122 cv
160.527 52.8589 159.88 51.2993 157.575 51.2993 cv
155.223 51.2993 154.719 52.8589 154.719 53.9653 cv
154.719 55.355 155.872 56.3633 156.76 56.916 cv
158.68 58.1152 li
160.193 59.0513 161.68 60.4429 161.68 62.7231 cv
161.68 65.3633 159.688 67.1621 156.568 67.1621 cv
f
175.924 57.5918 mo
174.559 57.5918 174.502 57.647 174.502 58.5 cv
174.502 62.5117 li
174.502 65.498 174.644 65.897 176.236 66.0688 cv
177.063 66.1548 li
177.232 66.2676 177.177 66.7798 177.005 66.8628 cv
175.469 66.8066 174.502 66.7798 173.393 66.7798 cv
172.169 66.7798 171.201 66.8359 170.092 66.8628 cv
169.921 66.7798 169.864 66.3237 170.035 66.1548 cv
170.519 66.0688 li
172.11 65.7827 172.169 65.498 172.169 62.5117 cv
172.169 52.27 li
172.169 49.2827 171.97 48.7988 170.491 48.686 cv
169.751 48.6289 li
169.58 48.5156 169.637 48.0029 169.808 47.918 cv
171.201 47.9458 172.169 48.0029 173.393 48.0029 cv
174.502 48.0029 175.469 47.9746 176.692 47.918 cv
176.863 48.0029 176.92 48.5156 176.748 48.6289 cv
176.208 48.686 li
174.559 48.8579 174.502 49.2827 174.502 52.27 cv
174.502 55.542 li
174.502 56.4238 174.559 56.4507 175.924 56.4507 cv
184.061 56.4507 li
185.426 56.4507 185.482 56.4238 185.482 55.542 cv
185.482 52.27 li
185.482 49.2827 185.426 48.8579 183.747 48.686 cv
183.206 48.6289 li
183.036 48.5156 183.093 48.0029 183.264 47.918 cv
184.57 47.9746 185.54 48.0029 186.706 48.0029 cv
187.815 48.0029 188.783 47.9746 190.063 47.918 cv
190.233 48.0029 190.291 48.5156 190.119 48.6289 cv
189.522 48.686 li
187.873 48.8579 187.815 49.2827 187.815 52.27 cv
187.815 62.5117 li
187.815 65.498 187.873 65.8687 189.522 66.0688 cv
190.205 66.1548 li
190.376 66.2676 190.319 66.7798 190.147 66.8628 cv
188.783 66.8066 187.815 66.7798 186.706 66.7798 cv
185.54 66.7798 184.516 66.8066 183.264 66.8628 cv
183.093 66.7798 183.036 66.3237 183.206 66.1548 cv
183.747 66.0688 li
185.482 65.7827 185.482 65.498 185.482 62.5117 cv
185.482 58.5 li
185.482 57.647 185.426 57.5918 184.061 57.5918 cv
175.924 57.5918 li
cp
f
204.497 59.5313 mo
204.497 55.5723 202.746 51.2993 198.161 51.2993 cv
195.666 51.2993 192.426 53.0044 192.426 58.2603 cv
192.426 61.8101 194.154 66.4204 198.882 66.4204 cv
201.763 66.4204 204.497 64.2603 204.497 59.5313 cv
190.025 59.0273 mo
190.025 54.228 193.627 50.5552 198.569 50.5552 cv
204.114 50.5552 206.897 54.563 206.897 58.7871 cv
206.897 63.6353 203.202 67.1621 198.569 67.1621 cv
193.242 67.1621 190.025 63.3472 190.025 59.0273 cv
f
211.241 63.1797 mo
211.241 65.6997 211.289 66.0117 212.825 66.1797 cv
213.474 66.2515 li
213.617 66.3706 213.57 66.7798 213.425 66.8516 cv
212.058 66.8027 211.266 66.7798 210.306 66.7798 cv
209.297 66.7798 208.434 66.8027 207.378 66.8516 cv
207.233 66.7798 207.186 66.3945 207.33 66.2515 cv
207.834 66.1797 li
209.226 65.9888 209.273 65.6997 209.273 63.1797 cv
209.273 54.3247 li
209.273 52.2837 209.226 51.8755 208.146 51.7554 cv
207.281 51.6587 li
207.113 51.5156 207.137 51.1558 207.33 51.0596 cv
208.602 50.8906 210.09 50.8667 212.081 50.8667 cv
214.073 50.8667 215.562 51.1304 216.689 51.8276 cv
217.793 52.5234 218.609 53.7715 218.609 55.4268 cv
218.609 57.6348 217.242 58.7407 216.209 59.2437 cv
215.153 59.7476 213.882 59.9624 212.897 59.9624 cv
212.729 59.8926 212.729 59.5317 212.873 59.4844 cv
215.465 59.0034 216.401 57.5386 216.401 55.4517 cv
216.401 53.1226 215.033 51.6128 212.538 51.6128 cv
211.266 51.6128 211.241 51.7065 211.241 52.4766 cv
211.241 63.1797 li
cp
f
221.228 54.5391 mo
221.228 52.019 221.179 51.6348 219.787 51.5161 cv
219.187 51.4678 li
219.043 51.3711 219.092 50.939 219.234 50.8672 cv
220.41 50.916 221.179 50.939 222.258 50.939 cv
223.194 50.939 224.011 50.916 225.043 50.8672 cv
225.187 50.939 225.235 51.3711 225.09 51.4678 cv
224.635 51.5161 li
223.242 51.6592 223.194 52.019 223.194 54.5391 cv
223.194 57.3008 li
223.194 57.7559 223.242 58.2109 223.508 58.2109 cv
223.723 58.2109 224.011 58.0679 224.179 57.9468 cv
224.515 57.6602 225.139 57.0352 225.403 56.7949 cv
227.994 54.228 li
228.45 53.7949 229.627 52.5708 229.866 52.2358 cv
229.987 52.0669 230.035 51.9468 230.035 51.8511 cv
230.035 51.7559 229.939 51.6841 229.627 51.6118 cv
228.979 51.4678 li
228.811 51.2988 228.835 50.9878 229.026 50.8672 cv
229.866 50.916 230.826 50.939 231.666 50.939 cv
232.507 50.939 233.322 50.916 234.041 50.8672 cv
234.211 50.9878 234.234 51.3242 234.091 51.4678 cv
233.467 51.5161 232.531 51.7559 231.859 52.1401 cv
231.188 52.5229 229.842 53.6509 228.498 54.9238 cv
226.339 56.9629 li
226.003 57.3008 225.786 57.5161 225.786 57.707 cv
225.786 57.877 225.931 58.0679 226.242 58.4512 cv
228.522 61.0659 230.37 63.2271 232.243 65.1948 cv
232.819 65.771 233.256 66.084 234.071 66.1802 cv
234.534 66.252 li
234.703 66.3711 234.654 66.7788 234.485 66.8521 cv
233.861 66.8032 233.203 66.7788 232.075 66.7788 cv
231.092 66.7788 230.249 66.8032 229.146 66.8521 cv
228.979 66.8032 228.907 66.394 229.051 66.252 cv
229.603 66.1538 li
229.939 66.1069 230.179 66.0352 230.179 65.916 cv
230.179 65.771 230.011 65.5801 229.842 65.3628 cv
229.386 64.7871 228.763 64.1392 227.851 63.1069 cv
225.931 60.9468 li
224.563 59.4121 224.179 58.9321 223.603 58.9321 cv
223.242 58.9321 223.194 59.2441 223.194 60.084 cv
223.194 63.1802 li
223.194 65.6992 223.242 66.0352 224.587 66.1802 cv
225.235 66.252 li
225.378 66.3481 225.331 66.7788 225.187 66.8521 cv
224.011 66.8032 223.194 66.7788 222.258 66.7788 cv
221.274 66.7788 220.458 66.8032 219.475 66.8521 cv
219.331 66.7788 219.282 66.4199 219.427 66.252 cv
219.907 66.1802 li
221.179 65.9878 221.228 65.6992 221.228 63.1802 cv
221.228 54.5391 li
cp
f
237.7 54.5879 mo
237.7 52.0439 237.652 51.6348 236.235 51.5156 cv
235.637 51.4678 li
235.492 51.3706 235.54 50.9399 235.684 50.8667 cv
236.884 50.916 237.7 50.9399 238.708 50.9399 cv
239.668 50.9399 240.484 50.916 241.684 50.8667 cv
241.828 50.9399 241.876 51.3706 241.732 51.4678 cv
241.132 51.5156 li
239.716 51.6348 239.668 52.0439 239.668 54.5879 cv
239.668 63.1309 li
239.668 65.6758 239.716 66.0117 241.132 66.1797 cv
241.732 66.252 li
241.876 66.3477 241.828 66.7788 241.684 66.8516 cv
240.484 66.8027 239.668 66.7788 238.708 66.7788 cv
237.7 66.7788 236.976 66.8027 235.776 66.8516 cv
235.632 66.7788 235.584 66.395 235.729 66.252 cv
236.235 66.1797 li
237.652 66.0117 237.7 65.6758 237.7 63.1309 cv
237.7 54.5879 li
cp
f
258.46 62.6992 mo
258.46 63.4204 258.46 66.2754 258.533 66.8984 cv
258.485 67.043 258.341 67.1621 258.077 67.1621 cv
257.789 66.7563 257.093 65.916 255.005 63.5391 cv
249.437 57.2031 li
248.789 56.459 247.156 54.4912 246.653 53.9653 cv
246.606 53.9653 li
246.509 54.2524 246.484 54.8032 246.484 55.5234 cv
246.484 60.7563 li
246.484 61.8833 246.509 65.0044 246.917 65.7222 cv
247.062 65.9883 247.541 66.1313 248.141 66.1792 cv
248.885 66.2524 li
249.028 66.4434 249.004 66.7324 248.837 66.8511 cv
247.757 66.8032 246.917 66.7793 246.029 66.7793 cv
245.022 66.7793 244.373 66.8032 243.534 66.8511 cv
243.365 66.7324 243.341 66.394 243.485 66.2524 cv
244.134 66.1792 li
244.685 66.1074 245.069 65.9634 245.189 65.6992 cv
245.525 64.8364 245.501 61.9082 245.501 60.7563 cv
245.501 53.8203 li
245.501 53.147 245.477 52.6421 244.973 52.0923 cv
244.637 51.7563 244.061 51.5874 243.485 51.5151 cv
243.077 51.4683 li
242.933 51.3242 242.933 50.9653 243.126 50.8672 cv
244.134 50.9395 245.405 50.9395 245.837 50.9395 cv
246.221 50.9395 246.629 50.916 246.941 50.8672 cv
247.422 52.0923 250.253 55.2603 251.044 56.1484 cv
253.373 58.7632 li
255.029 60.6113 256.204 61.9551 257.333 63.1074 cv
257.381 63.1074 li
257.477 62.9883 257.477 62.603 257.477 62.0991 cv
257.477 56.9634 li
257.477 55.835 257.453 52.7163 256.997 51.9951 cv
256.853 51.7793 256.47 51.6353 255.51 51.5151 cv
255.102 51.4683 li
254.933 51.3242 254.957 50.9395 255.148 50.8672 cv
256.253 50.916 257.068 50.9395 257.981 50.9395 cv
259.014 50.9395 259.637 50.916 260.452 50.8672 cv
260.645 50.9883 260.645 51.3242 260.501 51.4683 cv
260.165 51.5151 li
259.396 51.6353 258.917 51.8281 258.82 52.019 cv
258.412 52.8833 258.46 55.8594 258.46 56.9634 cv
258.46 62.6992 li
cp
f
264.764 67.1621 mo
262.747 67.1621 261.476 66.5391 261.019 66.2749 cv
260.731 65.7461 260.419 64.043 260.37 62.916 cv
260.492 62.7461 260.852 62.6992 260.946 62.8442 cv
261.307 64.0659 262.291 66.4199 265.076 66.4199 cv
267.091 66.4199 268.076 65.0991 268.076 63.6602 cv
268.076 62.603 267.858 61.4282 266.106 60.2993 cv
263.828 58.8101 li
262.627 58.019 261.234 56.6499 261.234 54.6831 cv
261.234 52.4033 263.011 50.5562 266.132 50.5562 cv
266.875 50.5562 267.738 50.7002 268.363 50.8672 cv
268.676 50.9653 269.011 51.0122 269.202 51.0122 cv
269.419 51.5869 269.635 52.9321 269.635 53.939 cv
269.538 54.084 269.155 54.1553 269.035 54.0122 cv
268.723 52.8589 268.076 51.2993 265.771 51.2993 cv
263.419 51.2993 262.915 52.8589 262.915 53.9653 cv
262.915 55.355 264.067 56.3633 264.954 56.916 cv
266.875 58.1152 li
268.387 59.0513 269.875 60.4429 269.875 62.7231 cv
269.875 65.3633 267.883 67.1621 264.764 67.1621 cv
f
grestore
gsave
0 0 mo
313 0 li
313 142 li
0 142 li
0 0 li
cp
clp
120.355 77.7695 mo
120.281 77.6953 120.293 77.5215 120.393 77.4727 cv
120.728 77.4961 121.286 77.5098 121.669 77.5098 cv
122.018 77.5098 122.65 77.4961 123.084 77.4727 cv
123.196 77.5098 123.184 77.6836 123.109 77.7695 cv
122.825 77.7949 li
122.563 77.8203 122.415 77.8945 122.415 78.0059 cv
122.415 78.1543 122.675 78.7871 123.06 79.668 cv
123.753 81.2188 124.486 82.7695 125.207 84.2949 cv
125.503 83.6738 125.837 82.9805 126.162 82.2852 cv
126.273 82.0488 126.359 81.8379 126.359 81.7773 cv
126.359 81.7148 126.322 81.6035 126.259 81.4551 cv
125.827 80.4609 125.368 79.4688 124.896 78.4766 cv
124.709 78.0918 124.523 77.8311 124.102 77.7949 cv
123.805 77.7695 li
123.716 77.6699 123.729 77.5215 123.83 77.4727 cv
124.188 77.4961 124.661 77.5098 125.156 77.5098 cv
125.776 77.5098 126.235 77.4961 126.521 77.4727 cv
126.607 77.5098 126.621 77.6699 126.545 77.7695 cv
126.223 77.7949 li
125.739 77.8311 125.727 77.918 125.962 78.4766 cv
126.223 79.084 126.57 79.8672 126.917 80.6348 cv
127.153 80.1523 127.376 79.6797 127.65 79.0098 cv
128.096 77.9551 128.035 77.8203 127.637 77.7949 cv
127.266 77.7695 li
127.178 77.6465 127.204 77.5098 127.291 77.4727 cv
127.625 77.4961 127.998 77.5098 128.457 77.5098 cv
128.866 77.5098 129.361 77.4961 129.646 77.4727 cv
129.734 77.5098 129.747 77.6699 129.671 77.7695 cv
129.313 77.7949 li
128.792 77.8311 128.568 78.3906 128.294 78.8984 cv
128.035 79.3574 127.514 80.4375 127.328 80.8711 cv
127.266 80.9961 127.214 81.1191 127.214 81.168 cv
127.214 81.2188 127.241 81.3184 127.303 81.4668 cv
127.725 82.4219 128.159 83.3516 128.568 84.2949 cv
128.953 83.4258 129.325 82.5586 129.684 81.6777 cv
129.932 81.082 130.589 79.4316 130.676 79.209 cv
130.837 78.7617 131.048 78.2285 131.048 78.0801 cv
131.048 77.9063 130.9 77.8066 130.64 77.7949 cv
130.279 77.7695 li
130.181 77.6582 130.193 77.5215 130.292 77.4727 cv
130.764 77.4961 131.099 77.5098 131.482 77.5098 cv
131.956 77.5098 132.314 77.4961 132.637 77.4727 cv
132.736 77.5098 132.749 77.6699 132.663 77.7695 cv
132.425 77.7949 li
131.806 77.8574 131.693 78.2285 130.95 79.9531 cv
130.043 82.0488 li
129.499 83.3145 129.001 84.5313 128.494 85.8574 cv
128.457 85.8828 128.406 85.8945 128.343 85.8945 cv
128.283 85.8945 128.221 85.8828 128.17 85.8574 cv
127.773 84.7539 127.055 83.2031 126.669 82.334 cv
126.223 83.2402 125.479 84.8281 125.12 85.8574 cv
125.083 85.8828 125.033 85.8945 124.971 85.8945 cv
124.909 85.8945 124.846 85.8828 124.785 85.8574 cv
124.574 85.3379 124.089 84.2207 123.928 83.8613 cv
123.134 82.1367 122.366 80.4121 121.559 78.6875 cv
121.322 78.1797 121.173 77.8438 120.653 77.7949 cv
120.355 77.7695 li
cp
false sop
.75021 .679683 .670222 .90164 cmyk
f
136.143 81.6895 mo
135.546 81.6895 135.521 81.7148 135.521 82.0859 cv
135.521 83.8359 li
135.521 85.1387 135.583 85.3125 136.279 85.3867 cv
136.639 85.4238 li
136.712 85.4727 136.688 85.6973 136.614 85.7344 cv
135.943 85.71 135.521 85.6973 135.038 85.6973 cv
134.503 85.6973 134.082 85.7207 133.599 85.7344 cv
133.524 85.6973 133.5 85.498 133.575 85.4238 cv
133.786 85.3867 li
134.479 85.2617 134.503 85.1387 134.503 83.8359 cv
134.503 79.3691 li
134.503 78.0684 134.417 77.8574 133.772 77.8066 cv
133.45 77.7813 li
133.375 77.7324 133.4 77.5098 133.475 77.4727 cv
134.082 77.4844 134.503 77.5098 135.038 77.5098 cv
135.521 77.5098 135.943 77.4961 136.477 77.4727 cv
136.551 77.5098 136.577 77.7324 136.501 77.7813 cv
136.266 77.8066 li
135.546 77.8809 135.521 78.0684 135.521 79.3691 cv
135.521 80.7969 li
135.521 81.1816 135.546 81.1934 136.143 81.1934 cv
139.689 81.1934 li
140.286 81.1934 140.311 81.1816 140.311 80.7969 cv
140.311 79.3691 li
140.311 78.0684 140.286 77.8809 139.553 77.8066 cv
139.318 77.7813 li
139.244 77.7324 139.268 77.5098 139.342 77.4727 cv
139.914 77.4961 140.334 77.5098 140.844 77.5098 cv
141.328 77.5098 141.749 77.4961 142.308 77.4727 cv
142.382 77.5098 142.407 77.7324 142.332 77.7813 cv
142.073 77.8066 li
141.352 77.8809 141.328 78.0684 141.328 79.3691 cv
141.328 83.8359 li
141.328 85.1387 141.352 85.2988 142.073 85.3867 cv
142.37 85.4238 li
142.443 85.4727 142.418 85.6973 142.345 85.7344 cv
141.749 85.71 141.328 85.6973 140.844 85.6973 cv
140.334 85.6973 139.889 85.71 139.342 85.7344 cv
139.268 85.6973 139.244 85.498 139.318 85.4238 cv
139.553 85.3867 li
140.311 85.2617 140.311 85.1387 140.311 83.8359 cv
140.311 82.0859 li
140.311 81.7148 140.286 81.6895 139.689 81.6895 cv
136.143 81.6895 li
cp
f
145.119 79.3945 mo
145.119 78.0801 145.094 77.8691 144.362 77.8066 cv
144.053 77.7813 li
143.978 77.7324 144.002 77.5098 144.077 77.4727 cv
144.697 77.4961 145.119 77.5098 145.64 77.5098 cv
146.137 77.5098 146.558 77.4961 147.178 77.4727 cv
147.253 77.5098 147.277 77.7324 147.203 77.7813 cv
146.892 77.8066 li
146.161 77.8691 146.137 78.0801 146.137 79.3945 cv
146.137 83.8105 li
146.137 85.127 146.161 85.2988 146.892 85.3867 cv
147.203 85.4238 li
147.277 85.4727 147.253 85.6973 147.178 85.7344 cv
146.558 85.709 146.137 85.6973 145.64 85.6973 cv
145.119 85.6973 144.697 85.709 144.077 85.7344 cv
144.002 85.6973 143.978 85.498 144.053 85.4238 cv
144.362 85.3867 li
145.094 85.2988 145.119 85.127 145.119 83.8105 cv
145.119 79.3945 li
cp
f
152.907 83.8359 mo
152.907 85.1387 152.931 85.3242 153.652 85.3867 cv
154.049 85.4238 li
154.123 85.4727 154.098 85.6973 154.023 85.7344 cv
153.316 85.709 152.894 85.6973 152.398 85.6973 cv
151.902 85.6973 151.469 85.709 150.674 85.7344 cv
150.599 85.6973 150.575 85.4863 150.674 85.4238 cv
151.121 85.3867 li
151.828 85.3242 151.89 85.1387 151.89 83.8359 cv
151.89 78.291 li
151.89 77.9063 151.89 77.8945 151.517 77.8945 cv
150.836 77.8945 li
150.303 77.8945 149.62 77.918 149.31 78.2031 cv
149.011 78.4766 148.888 78.75 148.752 79.0605 cv
148.652 79.1348 148.478 79.0723 148.429 78.9727 cv
148.627 78.4141 148.813 77.6211 148.9 77.125 cv
148.937 77.0996 149.099 77.0879 149.136 77.125 cv
149.211 77.5215 149.62 77.5098 150.191 77.5098 cv
155.215 77.5098 li
155.885 77.5098 155.996 77.4844 156.183 77.1621 cv
156.244 77.1367 156.381 77.1504 156.406 77.1992 cv
156.27 77.707 156.183 78.7129 156.22 79.084 cv
156.17 79.1836 155.959 79.1836 155.896 79.1094 cv
155.859 78.7988 155.773 78.3398 155.587 78.2031 cv
155.302 77.9922 154.83 77.8945 154.148 77.8945 cv
153.267 77.8945 li
152.894 77.8945 152.907 77.9063 152.907 78.3154 cv
152.907 83.8359 li
cp
f
158.734 79.3945 mo
158.734 78.0801 158.709 77.8691 157.977 77.8066 cv
157.667 77.7813 li
157.593 77.7324 157.617 77.5098 157.691 77.4727 cv
158.313 77.4961 158.734 77.5098 159.256 77.5098 cv
159.751 77.5098 160.173 77.4961 160.793 77.4727 cv
160.867 77.5098 160.893 77.7324 160.818 77.7813 cv
160.508 77.8066 li
159.775 77.8691 159.751 78.0801 159.751 79.3945 cv
159.751 83.8105 li
159.751 85.127 159.775 85.2988 160.508 85.3867 cv
160.818 85.4238 li
160.893 85.4727 160.867 85.6973 160.793 85.7344 cv
160.173 85.709 159.751 85.6973 159.256 85.6973 cv
158.734 85.6973 158.313 85.709 157.691 85.7344 cv
157.617 85.6973 157.593 85.498 157.667 85.4238 cv
157.977 85.3867 li
158.709 85.2988 158.734 85.127 158.734 83.8105 cv
158.734 79.3945 li
cp
f
170.22 83.5879 mo
170.22 83.9609 170.22 85.4355 170.257 85.7598 cv
170.232 85.834 170.157 85.8945 170.021 85.8945 cv
169.872 85.6836 169.512 85.25 168.434 84.0215 cv
165.555 80.7461 li
165.221 80.3633 164.377 79.3457 164.115 79.0723 cv
164.092 79.0723 li
164.041 79.2207 164.029 79.5059 164.029 79.8789 cv
164.029 82.584 li
164.029 83.166 164.041 84.7793 164.252 85.1494 cv
164.327 85.2871 164.574 85.3613 164.885 85.3867 cv
165.27 85.4238 li
165.344 85.5234 165.332 85.6719 165.245 85.7344 cv
164.687 85.709 164.252 85.6973 163.793 85.6973 cv
163.272 85.6973 162.938 85.709 162.504 85.7344 cv
162.416 85.6719 162.404 85.498 162.479 85.4238 cv
162.813 85.3867 li
163.099 85.3496 163.297 85.2744 163.359 85.1387 cv
163.532 84.6924 163.521 83.1777 163.521 82.584 cv
163.521 78.998 li
163.521 78.6514 163.508 78.3906 163.248 78.1055 cv
163.073 77.9316 162.776 77.8438 162.479 77.8066 cv
162.268 77.7813 li
162.193 77.707 162.193 77.5215 162.293 77.4727 cv
162.813 77.5098 163.471 77.5098 163.694 77.5098 cv
163.893 77.5098 164.104 77.4961 164.266 77.4727 cv
164.514 78.1055 165.977 79.7422 166.387 80.2012 cv
167.59 81.5527 li
168.445 82.5078 169.053 83.2031 169.637 83.7988 cv
169.661 83.7988 li
169.711 83.7363 169.711 83.5391 169.711 83.2773 cv
169.711 80.623 li
169.711 80.0391 169.698 78.4277 169.463 78.0547 cv
169.389 77.9434 169.189 77.8691 168.693 77.8066 cv
168.482 77.7813 li
168.396 77.707 168.407 77.5098 168.508 77.4727 cv
169.078 77.4961 169.5 77.5098 169.971 77.5098 cv
170.505 77.5098 170.827 77.4961 171.249 77.4727 cv
171.349 77.5332 171.349 77.707 171.273 77.7813 cv
171.1 77.8066 li
170.703 77.8691 170.455 77.9688 170.406 78.0684 cv
170.195 78.5137 170.22 80.0527 170.22 80.623 cv
170.22 83.5879 li
cp
f
180.002 84.4316 mo
180.002 84.9277 180.077 85.2246 180.301 85.3125 cv
180.338 85.3496 180.338 85.4238 180.288 85.4609 cv
180.139 85.4609 179.916 85.5098 179.68 85.5723 cv
179.023 85.7451 178.129 85.8945 177.459 85.8945 cv
175.983 85.8945 174.631 85.4863 173.676 84.5176 cv
172.932 83.7734 172.535 82.793 172.535 81.7021 cv
172.535 80.6484 172.882 79.5801 173.65 78.7617 cv
174.482 77.8945 175.711 77.3105 177.584 77.3105 cv
178.291 77.3105 178.948 77.4473 179.159 77.4961 cv
179.395 77.5469 179.779 77.6328 179.928 77.6094 cv
179.928 78.0176 180.002 78.6611 180.114 79.4082 cv
180.077 79.5059 179.854 79.5195 179.779 79.4453 cv
179.432 78.1055 178.502 77.6836 177.236 77.6836 cv
174.83 77.6836 173.775 79.3945 173.775 81.2559 cv
173.775 83.6367 175.004 85.5098 177.496 85.5098 cv
178.266 85.5098 178.725 85.3496 178.861 85.1387 cv
178.924 85.0508 178.985 84.8271 178.985 84.4316 cv
178.985 83.9355 li
178.985 82.8926 178.948 82.8184 178.18 82.7324 cv
177.633 82.6699 li
177.533 82.6201 177.547 82.3965 177.633 82.3594 cv
177.992 82.3848 178.676 82.3965 179.407 82.3965 cv
179.891 82.3965 180.313 82.3848 180.723 82.3594 cv
180.809 82.4102 180.821 82.5957 180.734 82.6699 cv
180.536 82.6953 li
180.016 82.7559 180.002 83.1035 180.002 83.7363 cv
180.002 84.4316 li
cp
f
188.346 85.8945 mo
187.304 85.8945 186.646 85.5723 186.41 85.4355 cv
186.262 85.1641 186.1 84.2832 186.076 83.6992 cv
186.138 83.6133 186.324 83.5879 186.373 83.6621 cv
186.56 84.2949 187.068 85.5098 188.507 85.5098 cv
189.549 85.5098 190.058 84.8281 190.058 84.084 cv
190.058 83.5391 189.945 82.9297 189.041 82.3477 cv
187.861 81.5781 li
187.242 81.168 186.521 80.4609 186.521 79.4453 cv
186.521 78.2656 187.439 77.3105 189.053 77.3105 cv
189.438 77.3105 189.884 77.3848 190.207 77.4727 cv
190.367 77.5215 190.541 77.5469 190.641 77.5469 cv
190.752 77.8438 190.863 78.5391 190.863 79.0605 cv
190.814 79.1348 190.615 79.1719 190.554 79.0977 cv
190.393 78.502 190.058 77.6953 188.867 77.6953 cv
187.65 77.6953 187.391 78.502 187.391 79.0723 cv
187.391 79.79 187.986 80.3125 188.445 80.5977 cv
189.438 81.2188 li
190.219 81.7031 190.988 82.4219 190.988 83.5996 cv
190.988 84.9648 189.959 85.8945 188.346 85.8945 cv
f
194.049 78.3652 mo
194.955 77.6582 196.108 77.3105 197.398 77.3105 cv
198.068 77.3105 199.012 77.4473 199.595 77.6094 cv
199.744 77.6465 199.83 77.6699 199.941 77.6582 cv
199.954 77.9434 200.016 78.7246 200.115 79.4824 cv
200.054 79.5684 199.867 79.5801 199.781 79.5059 cv
199.595 78.6621 199.036 77.6953 197.236 77.6953 cv
195.34 77.6953 193.727 78.8984 193.727 81.4668 cv
193.727 84.0723 195.377 85.5098 197.411 85.5098 cv
199.012 85.5098 199.719 84.4688 200.004 83.7363 cv
200.091 83.6738 200.277 83.6992 200.326 83.7871 cv
200.24 84.4316 199.917 85.25 199.73 85.4863 cv
199.582 85.5098 199.434 85.5605 199.297 85.6094 cv
199.023 85.709 198.131 85.8945 197.337 85.8945 cv
196.221 85.8945 195.152 85.6719 194.248 85.0645 cv
193.256 84.3809 192.486 83.252 192.486 81.6523 cv
192.486 80.2754 193.106 79.0977 194.049 78.3652 cv
f
204.392 81.6895 mo
203.796 81.6895 203.771 81.7148 203.771 82.0859 cv
203.771 83.8359 li
203.771 85.1387 203.833 85.3125 204.527 85.3867 cv
204.888 85.4238 li
204.962 85.4727 204.938 85.6973 204.863 85.7344 cv
204.193 85.71 203.771 85.6973 203.287 85.6973 cv
202.754 85.6973 202.332 85.7207 201.848 85.7344 cv
201.773 85.6973 201.749 85.498 201.824 85.4238 cv
202.034 85.3867 li
202.729 85.2617 202.754 85.1387 202.754 83.8359 cv
202.754 79.3691 li
202.754 78.0684 202.667 77.8574 202.021 77.8066 cv
201.699 77.7813 li
201.625 77.7324 201.65 77.5098 201.725 77.4727 cv
202.332 77.4844 202.754 77.5098 203.287 77.5098 cv
203.771 77.5098 204.193 77.4961 204.727 77.4727 cv
204.801 77.5098 204.826 77.7324 204.751 77.7813 cv
204.516 77.8066 li
203.796 77.8809 203.771 78.0684 203.771 79.3691 cv
203.771 80.7969 li
203.771 81.1816 203.796 81.1934 204.392 81.1934 cv
207.939 81.1934 li
208.535 81.1934 208.56 81.1816 208.56 80.7969 cv
208.56 79.3691 li
208.56 78.0684 208.535 77.8809 207.803 77.8066 cv
207.567 77.7813 li
207.492 77.7324 207.518 77.5098 207.592 77.4727 cv
208.162 77.4961 208.584 77.5098 209.094 77.5098 cv
209.576 77.5098 209.998 77.4961 210.557 77.4727 cv
210.631 77.5098 210.656 77.7324 210.582 77.7813 cv
210.321 77.8066 li
209.602 77.8809 209.576 78.0684 209.576 79.3691 cv
209.576 83.8359 li
209.576 85.1387 209.602 85.2988 210.321 85.3867 cv
210.619 85.4238 li
210.693 85.4727 210.668 85.6973 210.594 85.7344 cv
209.998 85.71 209.576 85.6973 209.094 85.6973 cv
208.584 85.6973 208.138 85.71 207.592 85.7344 cv
207.518 85.6973 207.492 85.498 207.567 85.4238 cv
207.803 85.3867 li
208.56 85.2617 208.56 85.1387 208.56 83.8359 cv
208.56 82.0859 li
208.56 81.7148 208.535 81.6895 207.939 81.6895 cv
204.392 81.6895 li
cp
f
219.695 81.9512 mo
219.695 79.9043 218.789 77.6953 216.42 77.6953 cv
215.129 77.6953 213.455 78.5762 213.455 81.293 cv
213.455 83.1289 214.348 85.5098 216.792 85.5098 cv
218.28 85.5098 219.695 84.3945 219.695 81.9512 cv
212.215 81.6895 mo
212.215 79.209 214.075 77.3105 216.631 77.3105 cv
219.496 77.3105 220.936 79.3828 220.936 81.5664 cv
220.936 84.0723 219.025 85.8945 216.631 85.8945 cv
213.877 85.8945 212.215 83.9219 212.215 81.6895 cv
f
230.173 81.9512 mo
230.173 79.9043 229.268 77.6953 226.897 77.6953 cv
225.607 77.6953 223.933 78.5762 223.933 81.293 cv
223.933 83.1289 224.826 85.5098 227.27 85.5098 cv
228.758 85.5098 230.173 84.3945 230.173 81.9512 cv
222.693 81.6895 mo
222.693 79.209 224.553 77.3105 227.109 77.3105 cv
229.975 77.3105 231.413 79.3828 231.413 81.5664 cv
231.413 84.0723 229.503 85.8945 227.109 85.8945 cv
224.354 85.8945 222.693 83.9219 222.693 81.6895 cv
f
234.088 79.3691 mo
234.088 78.0684 234.063 77.8691 233.281 77.8066 cv
232.971 77.7813 li
232.896 77.7324 232.922 77.5098 232.996 77.4727 cv
233.691 77.4961 234.113 77.5098 234.609 77.5098 cv
235.093 77.5098 235.515 77.4961 236.135 77.4727 cv
236.209 77.5098 236.234 77.7324 236.16 77.7813 cv
235.861 77.8066 li
235.13 77.8691 235.105 78.0684 235.105 79.3691 cv
235.105 83.6875 li
235.105 84.4688 235.143 84.791 235.365 85.0273 cv
235.502 85.1641 235.738 85.3125 236.718 85.3125 cv
237.772 85.3125 238.033 85.2617 238.231 85.1504 cv
238.479 85.002 238.802 84.5547 239.05 83.9219 cv
239.125 83.8613 239.36 83.9102 239.36 83.998 cv
239.36 84.1328 239.013 85.3984 238.84 85.7344 cv
238.207 85.709 237.027 85.6973 235.75 85.6973 cv
234.609 85.6973 li
234.088 85.6973 233.691 85.709 232.996 85.7344 cv
232.922 85.6973 232.896 85.498 232.971 85.4238 cv
233.344 85.3867 li
234.063 85.3125 234.088 85.1387 234.088 83.8359 cv
234.088 79.3691 li
cp
f
130.128 95.0918 mo
129.408 96.0605 128.925 97.5352 128.887 98.1934 cv
128.862 98.627 129.036 98.9883 129.397 98.9883 cv
129.669 98.9883 129.979 98.875 130.376 98.3418 cv
130.922 97.6113 131.505 95.9727 131.529 95.3164 cv
131.542 94.9316 131.468 94.4961 131.033 94.4961 cv
130.785 94.4961 130.488 94.6094 130.128 95.0918 cv
132.386 95.6875 mo
132.349 96.3691 131.988 97.5605 131.07 98.5039 cv
130.302 99.2969 129.632 99.3594 129.297 99.3594 cv
128.503 99.3594 127.982 98.7773 128.057 97.709 cv
128.106 96.9414 128.565 95.7383 129.408 94.9316 cv
130.054 94.3105 130.611 94.125 131.12 94.125 cv
132.001 94.125 132.436 94.7813 132.386 95.6875 cv
f
135.98 94.7578 mo
135.906 94.9688 135.807 95.3652 135.659 95.9102 cv
135.287 97.3008 134.952 98.4922 134.555 99.8555 cv
134.231 100.973 133.822 101.605 133.575 101.854 cv
133.389 102.027 132.817 102.523 132.085 102.523 cv
131.417 102.523 131.18 102.102 131.18 101.916 cv
131.18 101.668 131.329 101.457 131.464 101.357 cv
131.564 101.283 131.675 101.319 131.75 101.406 cv
132.048 101.717 132.419 101.916 132.693 101.916 cv
132.941 101.916 133.202 101.828 133.487 100.873 cv
134.058 98.9141 134.493 96.7783 135.087 94.7578 cv
134.058 94.7578 li
133.934 94.6465 133.983 94.4102 134.145 94.2988 cv
135.21 94.2988 li
135.535 93.1816 135.87 92.2148 136.602 91.3457 cv
137.221 90.6133 137.867 90.3164 138.585 90.3164 cv
139.044 90.3164 139.542 90.6387 139.542 91.1348 cv
139.542 91.457 139.207 91.8418 139.007 91.8418 cv
138.896 91.8418 138.846 91.7305 138.834 91.6426 cv
138.796 90.9609 138.45 90.7383 138.139 90.7383 cv
137.867 90.7383 137.531 90.9863 137.247 91.4082 cv
136.675 92.2383 136.428 93.1191 136.091 94.2988 cv
137.643 94.2988 li
137.73 94.4355 137.706 94.6211 137.52 94.7578 cv
135.98 94.7578 li
cp
f
143.222 92.8594 mo
143.222 91.5684 143.198 91.3828 142.465 91.2979 cv
142.267 91.2715 li
142.192 91.2227 142.217 90.998 142.291 90.9609 cv
142.825 90.9863 143.246 90.998 143.755 90.998 cv
146.088 90.998 li
146.881 90.998 147.614 90.998 147.762 90.9609 cv
147.836 91.1729 147.911 92.0645 147.961 92.6113 cv
147.911 92.6855 147.713 92.7109 147.651 92.6367 cv
147.465 92.0527 147.353 91.6191 146.707 91.457 cv
146.448 91.3945 146.051 91.3828 145.504 91.3828 cv
144.612 91.3828 li
144.239 91.3828 144.239 91.4082 144.239 91.8799 cv
144.239 94.3594 li
144.239 94.707 144.277 94.707 144.648 94.707 cv
145.368 94.707 li
145.889 94.707 146.273 94.6836 146.422 94.6328 cv
146.572 94.584 146.659 94.5098 146.721 94.1992 cv
146.82 93.6914 li
146.881 93.6152 147.092 93.6152 147.142 93.7031 cv
147.142 94 147.092 94.4844 147.092 94.9551 cv
147.092 95.4023 147.142 95.873 147.142 96.1465 cv
147.092 96.2344 146.881 96.2344 146.82 96.1582 cv
146.707 95.6758 li
146.659 95.4512 146.572 95.2656 146.324 95.2031 cv
146.15 95.1543 145.852 95.1426 145.368 95.1426 cv
144.648 95.1426 li
144.277 95.1426 144.239 95.1543 144.239 95.4766 cv
144.239 97.2266 li
144.239 97.8828 144.277 98.3047 144.475 98.5156 cv
144.623 98.6641 144.884 98.8008 145.976 98.8008 cv
146.931 98.8008 147.291 98.752 147.563 98.6152 cv
147.787 98.4922 148.121 98.0566 148.445 97.4121 cv
148.532 97.3496 148.705 97.3867 148.754 97.498 cv
148.667 97.9336 148.358 98.8887 148.197 99.2227 cv
147.08 99.1992 145.976 99.1855 144.871 99.1855 cv
143.755 99.1855 li
143.222 99.1855 142.8 99.1992 142.069 99.2227 cv
141.994 99.1855 141.969 98.9883 142.042 98.9141 cv
142.453 98.875 li
143.16 98.8145 143.222 98.627 143.222 97.3262 cv
143.222 92.8594 li
cp
f
157.758 97.0762 mo
157.758 97.4492 157.758 98.9258 157.795 99.248 cv
157.77 99.3223 157.695 99.3848 157.559 99.3848 cv
157.41 99.1738 157.051 98.7402 155.971 97.5117 cv
153.094 94.2363 li
152.758 93.8516 151.914 92.834 151.654 92.5625 cv
151.629 92.5625 li
151.58 92.7109 151.568 92.9961 151.568 93.3672 cv
151.568 96.0723 li
151.568 96.6563 151.58 98.2676 151.791 98.6406 cv
151.865 98.7773 152.113 98.8516 152.424 98.875 cv
152.808 98.9141 li
152.883 99.0117 152.87 99.1621 152.783 99.2227 cv
152.225 99.1992 151.791 99.1855 151.332 99.1855 cv
150.811 99.1855 150.476 99.1992 150.041 99.2227 cv
149.955 99.1621 149.943 98.9883 150.017 98.9141 cv
150.352 98.875 li
150.637 98.8379 150.836 98.7637 150.898 98.627 cv
151.071 98.1816 151.059 96.668 151.059 96.0723 cv
151.059 92.4863 li
151.059 92.1406 151.047 91.8789 150.785 91.5938 cv
150.612 91.4199 150.315 91.334 150.017 91.2969 cv
149.806 91.2715 li
149.732 91.1973 149.732 91.0117 149.83 90.9609 cv
150.352 90.998 151.01 90.998 151.233 90.998 cv
151.431 90.998 151.642 90.9863 151.803 90.9609 cv
152.051 91.5938 153.516 93.2305 153.924 93.6914 cv
155.127 95.043 li
155.984 95.998 156.592 96.6934 157.174 97.2871 cv
157.199 97.2871 li
157.249 97.2266 157.249 97.0273 157.249 96.7676 cv
157.249 94.1113 li
157.249 93.5293 157.236 91.916 157.001 91.5449 cv
156.926 91.4336 156.729 91.3574 156.232 91.2969 cv
156.021 91.2715 li
155.934 91.1973 155.946 90.998 156.046 90.9609 cv
156.616 90.9863 157.038 90.998 157.51 90.998 cv
158.043 90.998 158.365 90.9863 158.787 90.9609 cv
158.887 91.0234 158.887 91.1973 158.813 91.2715 cv
158.639 91.2969 li
158.241 91.3574 157.993 91.457 157.943 91.5566 cv
157.732 92.0039 157.758 93.541 157.758 94.1113 cv
157.758 97.0762 li
cp
f
167.23 97.9199 mo
167.23 98.416 167.306 98.7148 167.529 98.8008 cv
167.566 98.8379 167.566 98.9141 167.517 98.9512 cv
167.367 98.9512 167.145 99 166.908 99.0625 cv
166.252 99.2363 165.357 99.3848 164.688 99.3848 cv
163.212 99.3848 161.859 98.9746 160.904 98.0078 cv
160.16 97.2637 159.764 96.2832 159.764 95.1904 cv
159.764 94.1367 160.11 93.0703 160.879 92.252 cv
161.711 91.3828 162.939 90.8008 164.813 90.8008 cv
165.52 90.8008 166.177 90.9355 166.388 90.9863 cv
166.623 91.0352 167.008 91.123 167.156 91.0977 cv
167.156 91.5078 167.23 92.1523 167.343 92.8965 cv
167.306 92.9961 167.082 93.0078 167.008 92.9336 cv
166.66 91.5938 165.73 91.1719 164.465 91.1719 cv
162.059 91.1719 161.004 92.8848 161.004 94.7441 cv
161.004 97.127 162.232 99 164.725 99 cv
165.494 99 165.953 98.8379 166.09 98.627 cv
166.152 98.541 166.214 98.3184 166.214 97.9199 cv
166.214 97.4238 li
166.214 96.3828 166.177 96.3086 165.408 96.2207 cv
164.861 96.1582 li
164.762 96.1094 164.775 95.8867 164.861 95.8496 cv
165.221 95.873 165.904 95.8867 166.636 95.8867 cv
167.119 95.8867 167.541 95.873 167.951 95.8496 cv
168.037 95.8984 168.05 96.084 167.963 96.1582 cv
167.765 96.1836 li
167.244 96.2461 167.23 96.5938 167.23 97.2266 cv
167.23 97.9199 li
cp
f
170.639 92.8848 mo
170.639 91.5684 170.613 91.3574 169.881 91.2969 cv
169.571 91.2715 li
169.497 91.2227 169.521 90.998 169.596 90.9609 cv
170.217 90.9863 170.639 90.998 171.16 90.998 cv
171.655 90.998 172.077 90.9863 172.697 90.9609 cv
172.771 90.998 172.797 91.2227 172.723 91.2715 cv
172.412 91.2969 li
171.68 91.3574 171.655 91.5684 171.655 92.8848 cv
171.655 97.3008 li
171.655 98.6152 171.68 98.7891 172.412 98.875 cv
172.723 98.9141 li
172.797 98.9629 172.771 99.1855 172.697 99.2227 cv
172.077 99.1992 171.655 99.1855 171.16 99.1855 cv
170.639 99.1855 170.217 99.1992 169.596 99.2227 cv
169.521 99.1855 169.497 98.9893 169.571 98.9141 cv
169.881 98.875 li
170.613 98.7891 170.639 98.6152 170.639 97.3008 cv
170.639 92.8848 li
cp
f
182.123 97.0762 mo
182.123 97.4492 182.123 98.9258 182.16 99.248 cv
182.135 99.3223 182.061 99.3848 181.924 99.3848 cv
181.775 99.1738 181.416 98.7402 180.336 97.5117 cv
177.459 94.2363 li
177.123 93.8516 176.279 92.834 176.019 92.5625 cv
175.994 92.5625 li
175.945 92.7109 175.933 92.9961 175.933 93.3672 cv
175.933 96.0723 li
175.933 96.6563 175.945 98.2676 176.156 98.6406 cv
176.23 98.7773 176.478 98.8516 176.789 98.875 cv
177.173 98.9141 li
177.248 99.0117 177.235 99.1621 177.148 99.2227 cv
176.59 99.1992 176.156 99.1855 175.697 99.1855 cv
175.176 99.1855 174.841 99.1992 174.406 99.2227 cv
174.32 99.1621 174.308 98.9883 174.382 98.9141 cv
174.717 98.875 li
175.002 98.8379 175.201 98.7637 175.263 98.627 cv
175.436 98.1816 175.424 96.668 175.424 96.0723 cv
175.424 92.4863 li
175.424 92.1406 175.412 91.8789 175.15 91.5938 cv
174.977 91.4199 174.68 91.334 174.382 91.2969 cv
174.171 91.2715 li
174.097 91.1973 174.097 91.0117 174.195 90.9609 cv
174.717 90.998 175.375 90.998 175.598 90.998 cv
175.796 90.998 176.007 90.9863 176.168 90.9609 cv
176.416 91.5938 177.881 93.2305 178.289 93.6914 cv
179.492 95.043 li
180.349 95.998 180.957 96.6934 181.539 97.2871 cv
181.564 97.2871 li
181.614 97.2266 181.614 97.0273 181.614 96.7676 cv
181.614 94.1113 li
181.614 93.5293 181.602 91.916 181.366 91.5449 cv
181.291 91.4336 181.094 91.3574 180.598 91.2969 cv
180.387 91.2715 li
180.299 91.1973 180.311 90.998 180.411 90.9609 cv
180.981 90.9863 181.403 90.998 181.875 90.998 cv
182.408 90.998 182.73 90.9863 183.152 90.9609 cv
183.252 91.0234 183.252 91.1973 183.178 91.2715 cv
183.004 91.2969 li
182.606 91.3574 182.358 91.457 182.309 91.5566 cv
182.098 92.0039 182.123 93.541 182.123 94.1113 cv
182.123 97.0762 li
cp
f
185.777 92.8594 mo
185.777 91.5684 185.753 91.3828 185.021 91.2979 cv
184.822 91.2715 li
184.748 91.2227 184.773 90.998 184.848 90.9609 cv
185.381 90.9863 185.803 90.998 186.311 90.998 cv
188.644 90.998 li
189.438 90.998 190.17 90.998 190.318 90.9609 cv
190.393 91.1729 190.466 92.0645 190.517 92.6113 cv
190.466 92.6855 190.269 92.7109 190.207 92.6367 cv
190.021 92.0527 189.908 91.6191 189.264 91.457 cv
189.004 91.3945 188.606 91.3828 188.061 91.3828 cv
187.167 91.3828 li
186.795 91.3828 186.795 91.4082 186.795 91.8799 cv
186.795 94.3594 li
186.795 94.707 186.832 94.707 187.205 94.707 cv
187.923 94.707 li
188.445 94.707 188.83 94.6836 188.979 94.6328 cv
189.127 94.584 189.215 94.5098 189.276 94.1992 cv
189.375 93.6914 li
189.438 93.6152 189.648 93.6152 189.697 93.7031 cv
189.697 94 189.648 94.4844 189.648 94.9551 cv
189.648 95.4023 189.697 95.873 189.697 96.1465 cv
189.648 96.2344 189.438 96.2344 189.375 96.1582 cv
189.264 95.6758 li
189.215 95.4512 189.127 95.2656 188.879 95.2031 cv
188.705 95.1543 188.408 95.1426 187.923 95.1426 cv
187.205 95.1426 li
186.832 95.1426 186.795 95.1543 186.795 95.4766 cv
186.795 97.2266 li
186.795 97.8828 186.832 98.3047 187.031 98.5156 cv
187.18 98.6641 187.439 98.8008 188.531 98.8008 cv
189.486 98.8008 189.847 98.752 190.119 98.6152 cv
190.342 98.4922 190.678 98.0566 191 97.4121 cv
191.088 97.3496 191.262 97.3867 191.311 97.498 cv
191.224 97.9336 190.914 98.8887 190.752 99.2227 cv
189.636 99.1992 188.531 99.1855 187.428 99.1855 cv
186.311 99.1855 li
185.777 99.1855 185.355 99.1992 184.624 99.2227 cv
184.549 99.1855 184.525 98.9883 184.6 98.9141 cv
185.008 98.875 li
185.715 98.8145 185.777 98.627 185.777 97.3262 cv
185.777 92.8594 li
cp
f
193.64 92.8594 mo
193.64 91.5684 193.615 91.3828 192.883 91.2979 cv
192.685 91.2715 li
192.609 91.2227 192.635 90.998 192.709 90.9609 cv
193.242 90.9863 193.664 90.998 194.173 90.998 cv
196.506 90.998 li
197.299 90.998 198.031 90.998 198.18 90.9609 cv
198.254 91.1729 198.328 92.0645 198.379 92.6113 cv
198.328 92.6855 198.131 92.7109 198.068 92.6367 cv
197.883 92.0527 197.771 91.6191 197.125 91.457 cv
196.865 91.3945 196.469 91.3828 195.922 91.3828 cv
195.029 91.3828 li
194.656 91.3828 194.656 91.4082 194.656 91.8799 cv
194.656 94.3594 li
194.656 94.707 194.694 94.707 195.066 94.707 cv
195.785 94.707 li
196.307 94.707 196.691 94.6836 196.84 94.6328 cv
196.989 94.584 197.076 94.5098 197.139 94.1992 cv
197.237 93.6914 li
197.299 93.6152 197.51 93.6152 197.56 93.7031 cv
197.56 94 197.51 94.4844 197.51 94.9551 cv
197.51 95.4023 197.56 95.873 197.56 96.1465 cv
197.51 96.2344 197.299 96.2344 197.237 96.1582 cv
197.125 95.6758 li
197.076 95.4512 196.989 95.2656 196.741 95.2031 cv
196.567 95.1543 196.27 95.1426 195.785 95.1426 cv
195.066 95.1426 li
194.694 95.1426 194.656 95.1543 194.656 95.4766 cv
194.656 97.2266 li
194.656 97.8828 194.694 98.3047 194.893 98.5156 cv
195.041 98.6641 195.302 98.8008 196.394 98.8008 cv
197.349 98.8008 197.709 98.752 197.981 98.6152 cv
198.205 98.4922 198.539 98.0566 198.862 97.4121 cv
198.949 97.3496 199.123 97.3867 199.172 97.498 cv
199.086 97.9336 198.775 98.8887 198.614 99.2227 cv
197.498 99.1992 196.394 99.1855 195.289 99.1855 cv
194.173 99.1855 li
193.64 99.1855 193.218 99.1992 192.486 99.2227 cv
192.411 99.1855 192.387 98.9883 192.461 98.9141 cv
192.87 98.875 li
193.577 98.8145 193.64 98.627 193.64 97.3262 cv
193.64 92.8594 li
cp
f
202.519 94.6465 mo
202.519 94.8691 202.519 95.0059 202.557 95.0547 cv
202.594 95.0918 202.779 95.1172 203.412 95.1172 cv
203.858 95.1172 204.331 95.0684 204.689 94.7949 cv
205.024 94.5332 205.311 94.0996 205.311 93.2559 cv
205.311 92.2754 204.702 91.3457 203.325 91.3457 cv
202.557 91.3457 202.519 91.3945 202.519 91.7422 cv
202.519 94.6465 li
cp
201.502 92.8711 mo
201.502 91.6934 201.465 91.4824 200.956 91.4199 cv
200.559 91.3711 li
200.472 91.3086 200.472 91.1094 200.571 91.0605 cv
201.266 90.998 202.122 90.9609 203.338 90.9609 cv
204.106 90.9609 204.838 91.0234 205.409 91.334 cv
206.004 91.6426 206.439 92.2012 206.439 93.0703 cv
206.439 94.248 205.508 94.8945 204.889 95.1426 cv
204.826 95.2168 204.889 95.3398 204.95 95.4395 cv
205.942 97.0391 206.6 98.0332 207.443 98.7402 cv
207.654 98.9258 207.965 99.0625 208.3 99.0859 cv
208.361 99.1113 208.374 99.2109 208.313 99.2598 cv
208.2 99.2969 208.002 99.3223 207.766 99.3223 cv
206.712 99.3223 206.08 99.0117 205.198 97.7598 cv
204.876 97.3008 204.367 96.4453 203.982 95.8867 cv
203.797 95.6133 203.598 95.4883 203.102 95.4883 cv
202.543 95.4883 202.519 95.502 202.519 95.7617 cv
202.519 97.3262 li
202.519 98.627 202.543 98.7773 203.264 98.876 cv
203.523 98.9141 li
203.598 98.9746 203.573 99.1855 203.498 99.2227 cv
202.94 99.1992 202.519 99.1855 202.022 99.1855 cv
201.502 99.1855 201.055 99.1992 200.472 99.2227 cv
200.397 99.1855 200.373 99.001 200.447 98.9141 cv
200.758 98.876 li
201.477 98.7891 201.502 98.627 201.502 97.3262 cv
201.502 92.8711 li
cp
f
210.119 92.8848 mo
210.119 91.5684 210.095 91.3574 209.363 91.2969 cv
209.053 91.2715 li
208.979 91.2227 209.003 90.998 209.078 90.9609 cv
209.697 90.9863 210.119 90.998 210.64 90.998 cv
211.137 90.998 211.558 90.9863 212.179 90.9609 cv
212.254 90.998 212.278 91.2227 212.203 91.2715 cv
211.894 91.2969 li
211.162 91.3574 211.137 91.5684 211.137 92.8848 cv
211.137 97.3008 li
211.137 98.6152 211.162 98.7891 211.894 98.875 cv
212.203 98.9141 li
212.278 98.9629 212.254 99.1855 212.179 99.2227 cv
211.558 99.1992 211.137 99.1855 210.64 99.1855 cv
210.119 99.1855 209.697 99.1992 209.078 99.2227 cv
209.003 99.1855 208.979 98.9893 209.053 98.9141 cv
209.363 98.875 li
210.095 98.7891 210.119 98.6152 210.119 97.3008 cv
210.119 92.8848 li
cp
f
221.605 97.0762 mo
221.605 97.4492 221.605 98.9258 221.643 99.248 cv
221.617 99.3223 221.544 99.3848 221.406 99.3848 cv
221.258 99.1738 220.897 98.7402 219.818 97.5117 cv
216.94 94.2363 li
216.605 93.8516 215.762 92.834 215.502 92.5625 cv
215.477 92.5625 li
215.427 92.7109 215.414 92.9961 215.414 93.3672 cv
215.414 96.0723 li
215.414 96.6563 215.427 98.2676 215.638 98.6406 cv
215.713 98.7773 215.961 98.8516 216.271 98.875 cv
216.654 98.9141 li
216.729 99.0117 216.717 99.1621 216.631 99.2227 cv
216.072 99.1992 215.638 99.1855 215.179 99.1855 cv
214.658 99.1855 214.322 99.1992 213.889 99.2227 cv
213.802 99.1621 213.789 98.9883 213.863 98.9141 cv
214.199 98.875 li
214.484 98.8379 214.683 98.7637 214.744 98.627 cv
214.919 98.1816 214.906 96.668 214.906 96.0723 cv
214.906 92.4863 li
214.906 92.1406 214.894 91.8789 214.633 91.5938 cv
214.46 91.4199 214.162 91.334 213.863 91.2969 cv
213.652 91.2715 li
213.578 91.1973 213.578 91.0117 213.678 90.9609 cv
214.199 90.998 214.856 90.998 215.08 90.998 cv
215.277 90.998 215.488 90.9863 215.65 90.9609 cv
215.898 91.5938 217.362 93.2305 217.771 93.6914 cv
218.975 95.043 li
219.83 95.998 220.438 96.6934 221.021 97.2871 cv
221.047 97.2871 li
221.096 97.2266 221.096 97.0273 221.096 96.7676 cv
221.096 94.1113 li
221.096 93.5293 221.085 91.916 220.848 91.5449 cv
220.773 91.4336 220.575 91.3574 220.079 91.2969 cv
219.868 91.2715 li
219.781 91.1973 219.794 90.998 219.893 90.9609 cv
220.463 90.9863 220.885 90.998 221.356 90.998 cv
221.891 90.998 222.213 90.9863 222.635 90.9609 cv
222.734 91.0234 222.734 91.1973 222.659 91.2715 cv
222.485 91.2969 li
222.088 91.3574 221.84 91.457 221.791 91.5566 cv
221.58 92.0039 221.605 93.541 221.605 94.1113 cv
221.605 97.0762 li
cp
f
231.053 97.9199 mo
231.053 98.416 231.128 98.7148 231.352 98.8008 cv
231.389 98.8379 231.389 98.9141 231.339 98.9512 cv
231.189 98.9512 230.967 99 230.73 99.0625 cv
230.073 99.2363 229.18 99.3848 228.51 99.3848 cv
227.033 99.3848 225.682 98.9746 224.727 98.0078 cv
223.982 97.2637 223.586 96.2832 223.586 95.1904 cv
223.586 94.1367 223.933 93.0703 224.701 92.252 cv
225.532 91.3828 226.762 90.8008 228.635 90.8008 cv
229.342 90.8008 229.999 90.9355 230.21 90.9863 cv
230.445 91.0352 230.83 91.123 230.979 91.0977 cv
230.979 91.5078 231.053 92.1523 231.165 92.8965 cv
231.128 92.9961 230.904 93.0078 230.83 92.9336 cv
230.482 91.5938 229.553 91.1719 228.287 91.1719 cv
225.881 91.1719 224.826 92.8848 224.826 94.7441 cv
224.826 97.127 226.055 99 228.547 99 cv
229.316 99 229.775 98.8379 229.912 98.627 cv
229.975 98.541 230.036 98.3184 230.036 97.9199 cv
230.036 97.4238 li
230.036 96.3828 229.999 96.3086 229.23 96.2207 cv
228.684 96.1582 li
228.584 96.1094 228.598 95.8867 228.684 95.8496 cv
229.043 95.873 229.727 95.8867 230.458 95.8867 cv
230.941 95.8867 231.363 95.873 231.773 95.8496 cv
231.859 95.8984 231.872 96.084 231.785 96.1582 cv
231.587 96.1836 li
231.066 96.2461 231.053 96.5938 231.053 97.2266 cv
231.053 97.9199 li
cp
f
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%whiting.logo.small.horizontal.black.eps
%
%</whiting.logo.small.horizontal.black.eps>
%\fi
%
%\iffalse
%<*whiting.logo.small.vertical.white.eps>
%
%<<whiting.logo.small.vertical.white.eps
%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: whiting.logo.small.vertical.white.eps
%%Creator: Adobe Illustrator(R) 16.0
%%For: Eric Conrad
%%CreationDate: 3/31/14
%%BoundingBox: 0 0 266 188
%%HiResBoundingBox: 0 0 266 188
%%CropBox: 0 0 266 188
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%%Pages: 1
%%DocumentNeededResources:
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts:
%%DocumentNeededFonts:
%%DocumentNeededFeatures:
%%DocumentSuppliedFeatures:
%%DocumentProcessColors:
%%DocumentCustomColors:
%%CMYKCustomColor:
%%RGBCustomColor:
%%EndComments






%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf
{load def}bdf
/ddf
{put}bdf
/xddf
{3 -1 roll put}bdf
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2
	ps_level 2 ge
def
/level3
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
			/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def
			imageDict begin
			/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
				0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or
	{
		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if
		}
		{
		/DataSource load type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
		1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse
	/AGMCORE_avoid_L2_sep_space
		version cvr 2012 lt
		level2 and
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots
		userdict/Adobe_AGM_OnHost_Seps known
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
				AGMCORE_magenta_plate{
					4 3 roll pop pop pop
				}{
					AGMCORE_yellow_plate{
						4 2 roll pop pop pop
					}{
						4 1 roll pop pop pop
					}ifelse
				}ifelse
			}ifelse
			settransfer
		}
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
				AGMCORE_magenta_plate{
					{4 3 roll pop pop pop}
				}{
					AGMCORE_yellow_plate{
						{4 2 roll pop pop pop}
					}{
						{4 1 roll pop pop pop}
					}ifelse
				}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse
						}if
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name
										CSA map_csa
										MappedCSA
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop
		ColorSpaceFamily/Separation eq
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq
		currentdict/Components known and
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
			AGMCORE_host_sep Name(All)eq and{
				/TintProc{
					1 exch sub setseparationgray
				}bdf
			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
						/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
								/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1
		0 1 numarrays 1 sub
			{
			1 exch add/index cvx
			c1/get cvx/mul cvx
			}for
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def
			}{
				/name xdf
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
			TintMethod/Subtractive eq
				{
				subtractive_blend
				}{
				additive_blend
				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put
	end
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
				Intent findcolorrendering
				{
					/ColorRendering findresource true exch
				}
				{
					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
				}ifelse
				dup Intent/AbsoluteColorimetric eq
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if
		0 exch rlineto
		currentfile token pop dup type/stringtype eq
			{pop exit}if
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
		AGMCORE_distilling{
			erasepage
		}{
			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
	/PrepsDict where
		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }  	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
									1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
										1 AGMCORE_&setgray
										currentdict imageormask_sys
									}{
										currentdict ignoreimagedata
									}ifelse
								}ifelse
							}{
								MultipleDataSources NComponents AGMIMG_&colorimage
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
									}if
								}if
								1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
		AGMIMG_ccimage_exists
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and
		Name()ne and
		Name(All)ne and
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
							AGMCORE_is_cmyk_sep Name(All)ne and{
								level2{
									Name AGMCORE_IsSeparationAProcessColor
									{
										Operator/imagemask eq{
											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
											}if
										}{
											invert_image_samples
										}ifelse
									}{
										//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
											[/Separation Name[/DeviceGray]
											{
												sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
											}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
									}ifelse
									currentdict imageormask_sys
								}{
									currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
								}ifelse
							}{
								Operator/imagemask ne{
									invert_image_samples
								}if
								currentdict imageormask_sys
							}ifelse
						}{
							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys
								}{
								currentoverprint not
									{
									gsave
									knockout_unitsq
									grestore
									}if
								currentdict consumeimagedata
							}ifelse
						}ifelse
					}ifelse
				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint
					MappedCSA 0 get/DeviceCMYK eq and
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
						currentdict imageormask_sys
					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
							currentdict imageormask_sys
						}{
							gsave
							knockout_unitsq
							grestore
							currentdict consumeimagedata
						}ifelse
					}ifelse
				}
				{
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
						Operator/imagemask ne{
							MultipleDataSources{
								/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
							}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
							}ifelse
							invert_image_samples
						}if
						currentdict imageormask_sys
					}{
						currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys
							}{
							currentoverprint not
								{
								gsave
								knockout_unitsq
								grestore
								}if
							currentdict consumeimagedata
						}ifelse
					}ifelse
				}ifelse
			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{
			currentcmykcolor
			/AGMIMG_k xdf
			/AGMIMG_y xdf
			/AGMIMG_m xdf
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor
			}{
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if
						}
					]
					255
					{
						255 div
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark
		currentdict
		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
						indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
						}if
						currentdict consumeimagedata
					}ifelse
				}{
					AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
						}if
						currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for
			put	setcolorspace
		}if
		currentdict
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
	dup type/dicttype ne{
		10 dict begin
			/DataSource xdf
			/ImageMatrix xdf
			/BitsPerComponent xdf
			/Height xdf
			/Width xdf
			/ImageType 1 def
			/Decode[0 1 def]
			currentdict
		end
	}if
	dup begin
		/NComponents 1 cdndf
		/MultipleDataSources false cdndf
		/SkipImageProc{false}cdndf
		/Decode[
				0
				currentcolorspace 0 get/Indexed eq{
					2 BitsPerComponent exp 1 sub
				}{
					1
				}ifelse
		]cdndf
		/Operator/image cdndf
	end
	/sep_colorspace_dict AGMCORE_gget null eq{
		imageormask
	}{
		gsave
		dup begin invert_image_samples end
		sep_imageormask
		grestore
	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get
			255 exch sub
			2 index
			3 1 roll
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage
		end
	}def
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf
					Adobe_AGM_Image/AGMIMG_y xddf
					Adobe_AGM_Image/AGMIMG_m xddf
					Adobe_AGM_Image/AGMIMG_c xddf
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf
				Adobe_AGM_Image/AGMIMG_y xddf
				Adobe_AGM_Image/AGMIMG_m xddf
				Adobe_AGM_Image/AGMIMG_c xddf
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -188 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 188 li
266 188 li
266 0 li
cp
clp
gsave
113.265 86.7739 mo
153.52 86.7739 li
153.52 43.3979 li
113.265 43.3979 li
113.265 86.7739 li
cp
clp
134.051 52.562 mo
134.051 52.2466 li
137.619 51.0786 140.841 51.2837 143.751 51.834 cv
142.308 47.7397 li
143.662 48.4639 li
145.648 53.4336 li
142.997 52.4336 137.424 52.4336 134.051 52.562 cv
132.689 52.562 mo
129.46 52.4336 123.888 52.4336 121.094 53.4336 cv
123.08 48.4639 li
124.433 47.7397 li
122.996 51.834 li
125.907 51.2837 129.127 51.0786 132.697 52.2466 cv
132.689 52.562 li
cp
144.636 47.8267 mo
144.604 47.7656 142.682 46.814 142.682 46.814 cv
140.236 46.3008 136.207 46.5259 133.398 47.5586 cv
133.389 47.5586 li
130.577 46.5259 126.552 46.3008 124.106 46.814 cv
124.106 46.814 122.182 47.7656 122.153 47.8267 cv
119.173 54.4028 li
119.076 54.5859 119.229 54.7417 119.398 54.708 cv
123.928 53.8477 129.13 53.583 133.392 53.583 cv
133.396 53.583 li
137.655 53.583 142.858 53.8477 147.387 54.708 cv
147.559 54.7417 147.709 54.5859 147.613 54.4028 cv
144.636 47.8267 li
cp
false sop
/0
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
f
152.203 50.8125 mo
152.203 52.9575 152.073 54.9814 151.84 56.8965 cv
139.758 54.3447 127.047 54.3447 114.948 56.9023 cv
114.714 54.9844 114.584 52.9585 114.584 50.8125 cv
114.582 47.5464 li
114.582 47.1025 114.887 46.7324 115.3 46.6294 cv
115.322 46.6226 li
121.15 45.3755 127.195 44.7144 133.392 44.7144 cv
139.584 44.7144 145.621 45.3745 151.439 46.6177 cv
151.453 46.6226 li
151.884 46.7104 152.205 47.0903 152.205 47.5464 cv
152.203 50.8125 li
cp
134.215 60.5054 mo
134.215 56.8086 li
135.377 56.8184 136.538 56.8486 137.696 56.9053 cv
137.696 62.8247 li
134.215 60.5054 li
cp
148.15 69.7827 mo
148.147 69.7866 148.144 69.7944 148.141 69.7993 cv
147.095 71.9653 145.912 73.8867 144.666 75.5713 cv
144.663 75.5747 144.663 75.5757 144.662 75.5757 cv
143.528 77.1094 142.351 78.4575 141.18 79.6206 cv
141.18 73.2505 li
137.696 70.9326 li
137.696 82.6475 li
136.401 83.6245 135.208 84.3794 134.215 84.9263 cv
134.215 68.6133 li
137.696 70.9326 li
137.696 62.8257 li
141.18 65.1416 li
141.18 57.1475 li
142.344 57.2505 143.506 57.3706 144.662 57.5195 cv
144.662 67.4595 li
148.141 69.7764 li
148.141 58.0454 li
149.255 58.2354 150.364 58.4385 151.467 58.6714 cv
151.586 58.6973 li
150.896 62.9634 149.67 66.6343 148.15 69.7827 cv
132.572 84.9263 mo
127.648 82.2085 117.758 74.5015 115.202 58.7017 cv
115.322 58.6768 li
120.952 57.4873 126.752 56.8633 132.572 56.8086 cv
132.572 84.9263 li
cp
151.864 45.3687 mo
151.844 45.3604 li
151.717 45.3315 li
145.719 44.0483 139.554 43.3984 133.392 43.3984 cv
127.229 43.3984 121.056 44.0503 115.047 45.3354 cv
114.988 45.3477 li
114.932 45.3657 li
113.971 45.6025 113.265 46.5044 113.265 47.5474 cv
113.267 50.8125 li
113.267 74.3604 127.838 83.9136 132.304 86.2803 cv
132.661 86.4707 133.031 86.5674 133.399 86.5674 cv
133.769 86.5674 134.137 86.4707 134.491 86.2773 cv
138.945 83.9165 153.52 74.3604 153.52 50.8125 cv
153.52 47.5474 li
153.52 46.5293 152.834 45.6357 151.864 45.3687 cv
f
144.662 67.4595 mo
141.18 65.1421 li
141.18 73.2505 li
144.662 75.5674 li
144.662 67.4595 li
cp
f
119.573 66.5957 mo
121.808 66.5957 li
121.845 67.3159 121.973 67.9717 122.161 68.564 cv
121.45 68.7241 120.86 68.9229 120.389 69.1138 cv
119.928 68.3711 119.638 67.5161 119.573 66.5957 cv
120.389 63.2749 mo
120.86 63.4658 121.45 63.6641 122.163 63.8247 cv
121.973 64.416 121.845 65.0737 121.808 65.793 cv
119.573 65.793 li
119.638 64.873 119.929 64.0181 120.389 63.2749 cv
123.969 60.7461 mo
123.477 61.2778 122.889 62.0518 122.445 63.064 cv
121.831 62.9307 121.303 62.7651 120.873 62.6021 cv
121.658 61.6748 122.737 61.0068 123.969 60.7461 cv
124.72 63.3301 mo
124.203 63.3149 123.721 63.2729 123.273 63.209 cv
123.717 62.2788 124.287 61.5757 124.72 61.1289 cv
124.72 63.3301 li
cp
124.72 65.793 mo
122.614 65.793 li
122.651 65.1279 122.78 64.522 122.966 63.9761 cv
123.5 64.061 124.085 64.1167 124.72 64.1348 cv
124.72 65.793 li
cp
124.72 68.2539 mo
124.085 68.2729 123.5 68.3257 122.966 68.4111 cv
122.78 67.8667 122.651 67.2607 122.614 66.5957 cv
124.72 66.5957 li
124.72 68.2539 li
cp
124.72 71.2598 mo
124.287 70.811 123.717 70.1089 123.273 69.1797 cv
123.721 69.1167 124.203 69.0747 124.72 69.0591 cv
124.72 71.2598 li
cp
120.872 69.7847 mo
121.303 69.6221 121.831 69.458 122.445 69.3247 cv
122.889 70.3359 123.477 71.1118 123.969 71.6431 cv
122.735 71.3818 121.657 70.7139 120.872 69.7847 cv
125.523 69.0591 mo
126.043 69.0747 126.526 69.1167 126.974 69.1807 cv
126.531 70.1157 125.957 70.8198 125.523 71.2637 cv
125.523 69.0591 li
cp
125.523 66.5957 mo
127.636 66.5957 li
127.596 67.2607 127.469 67.8667 127.283 68.4131 cv
126.749 68.3257 126.159 68.2729 125.523 68.2539 cv
125.523 66.5957 li
cp
125.523 64.1348 mo
126.159 64.1167 126.75 64.061 127.287 63.9761 cv
127.469 64.521 127.596 65.127 127.636 65.793 cv
125.523 65.793 li
125.523 64.1348 li
cp
125.523 61.1201 mo
125.958 61.5659 126.534 62.27 126.979 63.208 cv
126.53 63.2729 126.044 63.3149 125.523 63.3301 cv
125.523 61.1201 li
cp
129.374 62.603 mo
128.942 62.7671 128.417 62.9307 127.803 63.064 cv
127.359 62.0527 126.773 61.2798 126.283 60.748 cv
127.511 61.0088 128.59 61.6768 129.374 62.603 cv
129.855 63.2749 mo
130.316 64.019 130.605 64.873 130.672 65.793 cv
128.44 65.793 li
128.404 65.0737 128.274 64.416 128.086 63.8247 cv
128.797 63.6641 129.385 63.4658 129.855 63.2749 cv
129.855 69.1138 mo
129.385 68.9229 128.794 68.7241 128.086 68.5649 cv
128.274 67.9717 128.404 67.3169 128.44 66.5957 cv
130.672 66.5957 li
130.605 67.5161 130.316 68.3711 129.855 69.1138 cv
126.283 71.6411 mo
126.773 71.1099 127.359 70.335 127.803 69.3257 cv
128.417 69.458 128.942 69.6221 129.374 69.7847 cv
128.59 70.7129 127.511 71.3799 126.283 71.6411 cv
125.123 72.5679 mo
128.637 72.5679 131.497 69.709 131.497 66.1948 cv
131.497 62.6797 128.637 59.8208 125.123 59.8208 cv
121.608 59.8208 118.75 62.6797 118.75 66.1948 cv
118.75 69.709 121.608 72.5679 125.123 72.5679 cv
f
grestore
gsave
43 117.748 mo
223 117.748 li
223 93.168 li
43 93.168 li
43 117.748 li
cp
clp
48.1484 97.5781 mo
48.1484 94.4189 47.8652 94.0781 46.1855 93.9351 cv
45.4756 93.8789 li
45.3042 93.7651 45.3613 93.2529 45.5322 93.168 cv
47.1816 93.2241 48.1484 93.2529 49.3433 93.2529 cv
50.4824 93.2529 51.4492 93.2241 52.5874 93.168 cv
52.7573 93.2529 52.8145 93.7651 52.6445 93.8789 cv
52.2173 93.9351 li
50.5396 94.1641 50.4824 94.5605 50.4824 97.5781 cv
50.4824 108.133 li
50.4824 110.379 50.3672 112.342 49.8286 113.65 cv
48.8882 115.928 46.8696 117.748 44.2222 117.748 cv
43.8823 117.748 43.0005 117.719 43.0005 117.15 cv
43.0005 116.666 43.4253 115.84 44.0234 115.84 cv
44.3652 115.84 44.7075 115.896 45.0776 116.012 cv
45.4756 116.125 45.8735 116.211 46.2715 116.211 cv
46.8696 116.211 47.2114 115.869 47.4102 115.471 cv
48.0645 114.133 48.1484 109.867 48.1484 108.33 cv
48.1484 97.5781 li
cp
false sop
0 0 0 0 cmyk
f
67.0557 104.781 mo
67.0557 100.822 65.3047 96.5488 60.7207 96.5488 cv
58.2236 96.5488 54.9849 98.2539 54.9849 103.51 cv
54.9849 107.061 56.7129 111.67 61.4399 111.67 cv
64.3208 111.67 67.0557 109.51 67.0557 104.781 cv
52.5835 104.277 mo
52.5835 99.4785 56.1846 95.8057 61.1279 95.8057 cv
66.6719 95.8057 69.4556 99.8135 69.4556 104.037 cv
69.4556 108.885 65.7598 112.412 61.1279 112.412 cv
55.8008 112.412 52.5835 108.598 52.5835 104.277 cv
f
74.9082 104.277 mo
73.7563 104.277 73.708 104.326 73.708 105.047 cv
73.708 108.43 li
73.708 110.949 73.8281 111.285 75.1724 111.43 cv
75.8672 111.502 li
76.0122 111.598 75.9634 112.029 75.8203 112.102 cv
74.5234 112.053 73.708 112.029 72.771 112.029 cv
71.7402 112.029 70.9243 112.078 69.9883 112.102 cv
69.8442 112.029 69.7974 111.645 69.939 111.502 cv
70.3472 111.43 li
71.6914 111.189 71.7402 110.949 71.7402 108.43 cv
71.7402 99.7891 li
71.7402 97.2695 71.5723 96.8623 70.3242 96.7656 cv
69.6992 96.7178 li
69.5552 96.6211 69.604 96.1895 69.748 96.1172 cv
70.9243 96.1406 71.7402 96.1895 72.771 96.1895 cv
73.708 96.1895 74.5234 96.166 75.5552 96.1172 cv
75.6992 96.1895 75.748 96.6211 75.603 96.7178 cv
75.147 96.7656 li
73.7563 96.9092 73.708 97.2695 73.708 99.7891 cv
73.708 102.551 li
73.708 103.293 73.7563 103.318 74.9082 103.318 cv
81.772 103.318 li
82.9243 103.318 82.9731 103.293 82.9731 102.551 cv
82.9731 99.7891 li
82.9731 97.2695 82.9243 96.9092 81.5083 96.7656 cv
81.0532 96.7178 li
80.9082 96.6211 80.9551 96.1895 81.1001 96.1172 cv
82.2031 96.166 83.02 96.1895 84.0044 96.1895 cv
84.9404 96.1895 85.7563 96.166 86.8364 96.1172 cv
86.978 96.1895 87.0273 96.6211 86.8853 96.7178 cv
86.3794 96.7656 li
84.9893 96.9092 84.9404 97.2695 84.9404 99.7891 cv
84.9404 108.43 li
84.9404 110.949 84.9893 111.262 86.3794 111.43 cv
86.9551 111.502 li
87.0991 111.598 87.0513 112.029 86.9063 112.102 cv
85.7563 112.053 84.9404 112.029 84.0044 112.029 cv
83.02 112.029 82.1572 112.053 81.1001 112.102 cv
80.9551 112.029 80.9082 111.645 81.0532 111.502 cv
81.5083 111.43 li
82.9731 111.189 82.9731 110.949 82.9731 108.43 cv
82.9731 105.047 li
82.9731 104.326 82.9243 104.277 81.772 104.277 cv
74.9082 104.277 li
cp
f
103.35 107.949 mo
103.35 108.67 103.35 111.525 103.419 112.148 cv
103.373 112.293 103.229 112.412 102.965 112.412 cv
102.678 112.006 101.98 111.166 99.8926 108.789 cv
94.3247 102.453 li
93.6777 101.709 92.0444 99.7412 91.5405 99.2148 cv
91.4946 99.2148 li
91.3965 99.502 91.3726 100.053 91.3726 100.773 cv
91.3726 106.006 li
91.3726 107.133 91.3965 110.254 91.8047 110.973 cv
91.9497 111.238 92.4297 111.381 93.0298 111.43 cv
93.7734 111.502 li
93.9175 111.693 93.8926 111.982 93.7246 112.102 cv
92.6445 112.053 91.8047 112.029 90.9175 112.029 cv
89.9087 112.029 89.2617 112.053 88.4214 112.102 cv
88.2534 111.982 88.2305 111.645 88.3726 111.502 cv
89.0215 111.43 li
89.5728 111.357 89.9565 111.213 90.0786 110.949 cv
90.4116 110.086 90.3887 107.158 90.3887 106.006 cv
90.3887 99.0703 li
90.3887 98.3975 90.3657 97.8926 89.8618 97.3418 cv
89.5254 97.0059 88.9497 96.8369 88.3726 96.7656 cv
87.9648 96.7178 li
87.8208 96.5742 87.8208 96.2148 88.0137 96.1172 cv
89.0215 96.1895 90.2925 96.1895 90.7246 96.1895 cv
91.1094 96.1895 91.5176 96.166 91.8296 96.1172 cv
92.3086 97.3418 95.1406 100.51 95.9336 101.398 cv
98.2617 104.014 li
99.9155 105.861 101.092 107.205 102.221 108.357 cv
102.27 108.357 li
102.366 108.238 102.366 107.854 102.366 107.35 cv
102.366 102.213 li
102.366 101.085 102.342 97.9658 101.885 97.2451 cv
101.741 97.0293 101.357 96.8848 100.396 96.7656 cv
99.9888 96.7178 li
99.8208 96.5742 99.8457 96.1895 100.037 96.1172 cv
101.141 96.166 101.957 96.1895 102.87 96.1895 cv
103.9 96.1895 104.523 96.166 105.34 96.1172 cv
105.534 96.2383 105.534 96.5742 105.389 96.7178 cv
105.053 96.7656 li
104.286 96.8848 103.805 97.0781 103.708 97.2695 cv
103.301 98.1328 103.35 101.109 103.35 102.213 cv
103.35 107.949 li
cp
f
109.693 112.412 mo
107.675 112.412 106.404 111.789 105.949 111.525 cv
105.66 110.996 105.347 109.293 105.3 108.166 cv
105.42 107.996 105.781 107.949 105.877 108.094 cv
106.236 109.316 107.22 111.67 110.004 111.67 cv
112.02 111.67 113.004 110.349 113.004 108.91 cv
113.004 107.854 112.79 106.678 111.035 105.549 cv
108.756 104.061 li
107.557 103.27 106.165 101.9 106.165 99.9336 cv
106.165 97.6533 107.941 95.8057 111.061 95.8057 cv
111.804 95.8057 112.668 95.9502 113.293 96.1172 cv
113.604 96.2148 113.939 96.2617 114.13 96.2617 cv
114.347 96.8369 114.564 98.1816 114.564 99.1895 cv
114.468 99.334 114.084 99.4053 113.963 99.2617 cv
113.652 98.1094 113.004 96.5488 110.699 96.5488 cv
108.347 96.5488 107.843 98.1094 107.843 99.2148 cv
107.843 100.605 108.997 101.613 109.884 102.166 cv
111.804 103.365 li
113.316 104.301 114.804 105.693 114.804 107.973 cv
114.804 110.613 112.813 112.412 109.693 112.412 cv
f
129.049 102.842 mo
127.684 102.842 127.627 102.896 127.627 103.75 cv
127.627 107.762 li
127.627 110.748 127.768 111.146 129.361 111.318 cv
130.188 111.405 li
130.358 111.518 130.301 112.03 130.129 112.113 cv
128.594 112.057 127.627 112.03 126.518 112.03 cv
125.293 112.03 124.326 112.086 123.217 112.113 cv
123.045 112.03 122.988 111.574 123.16 111.405 cv
123.643 111.318 li
125.236 111.033 125.293 110.748 125.293 107.762 cv
125.293 97.5195 li
125.293 94.5332 125.094 94.0488 123.615 93.936 cv
122.875 93.8789 li
122.705 93.7656 122.762 93.2529 122.932 93.168 cv
124.326 93.1958 125.293 93.2529 126.518 93.2529 cv
127.627 93.2529 128.594 93.2246 129.817 93.168 cv
129.988 93.2529 130.045 93.7656 129.873 93.8789 cv
129.332 93.936 li
127.684 94.1074 127.627 94.5332 127.627 97.5195 cv
127.627 100.792 li
127.627 101.674 127.684 101.701 129.049 101.701 cv
137.186 101.701 li
138.551 101.701 138.607 101.674 138.607 100.792 cv
138.607 97.5195 li
138.607 94.5332 138.551 94.1074 136.871 93.936 cv
136.33 93.8789 li
136.16 93.7656 136.217 93.2529 136.389 93.168 cv
137.694 93.2246 138.664 93.2529 139.83 93.2529 cv
140.939 93.2529 141.908 93.2246 143.188 93.168 cv
143.357 93.2529 143.416 93.7656 143.244 93.8789 cv
142.646 93.936 li
140.998 94.1074 140.939 94.5332 140.939 97.5195 cv
140.939 107.762 li
140.939 110.748 140.998 111.119 142.646 111.318 cv
143.33 111.405 li
143.5 111.518 143.443 112.03 143.271 112.113 cv
141.908 112.057 140.939 112.03 139.83 112.03 cv
138.664 112.03 137.641 112.057 136.389 112.113 cv
136.217 112.03 136.16 111.574 136.33 111.405 cv
136.871 111.318 li
138.607 111.033 138.607 110.748 138.607 107.762 cv
138.607 103.75 li
138.607 102.896 138.551 102.842 137.186 102.842 cv
129.049 102.842 li
cp
f
157.621 104.781 mo
157.621 100.822 155.871 96.5488 151.285 96.5488 cv
148.791 96.5488 145.551 98.2539 145.551 103.51 cv
145.551 107.061 147.279 111.67 152.006 111.67 cv
154.887 111.67 157.621 109.51 157.621 104.781 cv
143.15 104.277 mo
143.15 99.4785 146.752 95.8057 151.693 95.8057 cv
157.238 95.8057 160.021 99.8135 160.021 104.037 cv
160.021 108.885 156.326 112.412 151.693 112.412 cv
146.367 112.412 143.15 108.598 143.15 104.277 cv
f
164.365 108.43 mo
164.365 110.949 164.414 111.262 165.949 111.43 cv
166.598 111.502 li
166.742 111.621 166.695 112.029 166.549 112.102 cv
165.182 112.053 164.391 112.029 163.43 112.029 cv
162.422 112.029 161.559 112.053 160.502 112.102 cv
160.357 112.029 160.311 111.645 160.455 111.502 cv
160.959 111.43 li
162.35 111.238 162.398 110.949 162.398 108.43 cv
162.398 99.5742 li
162.398 97.5332 162.35 97.126 161.27 97.0059 cv
160.406 96.9082 li
160.238 96.7656 160.261 96.4053 160.455 96.3096 cv
161.727 96.1406 163.215 96.1162 165.205 96.1162 cv
167.197 96.1162 168.686 96.3809 169.814 97.0771 cv
170.918 97.7734 171.734 99.0215 171.734 100.677 cv
171.734 102.885 170.367 103.99 169.334 104.493 cv
168.277 104.998 167.006 105.213 166.021 105.213 cv
165.854 105.143 165.854 104.781 165.998 104.734 cv
168.59 104.254 169.525 102.789 169.525 100.701 cv
169.525 98.373 168.158 96.8623 165.662 96.8623 cv
164.391 96.8623 164.365 96.957 164.365 97.7266 cv
164.365 108.43 li
cp
f
174.352 99.7891 mo
174.352 97.2686 174.303 96.8848 172.912 96.7656 cv
172.311 96.7178 li
172.168 96.6211 172.217 96.1895 172.359 96.1172 cv
173.535 96.166 174.303 96.1895 175.383 96.1895 cv
176.318 96.1895 177.135 96.166 178.168 96.1172 cv
178.311 96.1895 178.359 96.6211 178.215 96.7178 cv
177.76 96.7656 li
176.367 96.9092 176.318 97.2686 176.318 99.7891 cv
176.318 102.551 li
176.318 103.006 176.367 103.461 176.633 103.461 cv
176.848 103.461 177.135 103.318 177.303 103.197 cv
177.639 102.91 178.264 102.285 178.527 102.045 cv
181.119 99.4775 li
181.574 99.0449 182.752 97.8213 182.99 97.4863 cv
183.111 97.3174 183.16 97.1973 183.16 97.1006 cv
183.16 97.0059 183.064 96.9336 182.752 96.8623 cv
182.104 96.7178 li
181.936 96.5488 181.959 96.2383 182.15 96.1172 cv
182.99 96.166 183.951 96.1895 184.791 96.1895 cv
185.631 96.1895 186.447 96.166 187.166 96.1172 cv
187.336 96.2383 187.359 96.5742 187.215 96.7178 cv
186.592 96.7656 185.656 97.0059 184.984 97.3896 cv
184.313 97.7734 182.967 98.9014 181.623 100.174 cv
179.463 102.213 li
179.127 102.551 178.91 102.766 178.91 102.957 cv
178.91 103.127 179.055 103.318 179.367 103.701 cv
181.646 106.316 183.494 108.477 185.367 110.445 cv
185.943 111.021 186.381 111.334 187.195 111.43 cv
187.658 111.502 li
187.828 111.621 187.779 112.029 187.609 112.102 cv
186.986 112.053 186.328 112.029 185.199 112.029 cv
184.217 112.029 183.375 112.053 182.271 112.102 cv
182.104 112.053 182.031 111.644 182.176 111.502 cv
182.727 111.404 li
183.064 111.357 183.303 111.285 183.303 111.166 cv
183.303 111.021 183.135 110.83 182.967 110.613 cv
182.51 110.037 181.887 109.389 180.975 108.357 cv
179.055 106.197 li
177.688 104.662 177.303 104.182 176.727 104.182 cv
176.367 104.182 176.318 104.494 176.318 105.334 cv
176.318 108.43 li
176.318 110.949 176.367 111.285 177.711 111.43 cv
178.359 111.502 li
178.502 111.598 178.456 112.029 178.311 112.102 cv
177.135 112.053 176.318 112.029 175.383 112.029 cv
174.398 112.029 173.584 112.053 172.6 112.102 cv
172.456 112.029 172.406 111.67 172.551 111.502 cv
173.031 111.43 li
174.303 111.238 174.352 110.949 174.352 108.43 cv
174.352 99.7891 li
cp
f
190.824 99.8379 mo
190.824 97.2939 190.777 96.8848 189.359 96.7656 cv
188.761 96.7178 li
188.617 96.6211 188.664 96.1895 188.809 96.1172 cv
190.008 96.166 190.824 96.1895 191.832 96.1895 cv
192.793 96.1895 193.609 96.166 194.809 96.1172 cv
194.953 96.1895 195 96.6211 194.857 96.7178 cv
194.256 96.7656 li
192.84 96.8848 192.793 97.2939 192.793 99.8379 cv
192.793 108.381 li
192.793 110.926 192.84 111.262 194.256 111.43 cv
194.857 111.502 li
195 111.598 194.953 112.028 194.809 112.102 cv
193.609 112.053 192.793 112.028 191.832 112.028 cv
190.824 112.028 190.1 112.053 188.9 112.102 cv
188.756 112.028 188.709 111.645 188.854 111.502 cv
189.359 111.43 li
190.777 111.262 190.824 110.926 190.824 108.381 cv
190.824 99.8379 li
cp
f
211.584 107.949 mo
211.584 108.67 211.584 111.525 211.658 112.148 cv
211.609 112.293 211.465 112.412 211.201 112.412 cv
210.914 112.006 210.217 111.166 208.129 108.789 cv
202.561 102.453 li
201.914 101.709 200.281 99.7412 199.777 99.2148 cv
199.73 99.2148 li
199.633 99.502 199.609 100.053 199.609 100.773 cv
199.609 106.006 li
199.609 107.133 199.633 110.254 200.041 110.973 cv
200.186 111.238 200.666 111.381 201.266 111.43 cv
202.01 111.502 li
202.152 111.693 202.129 111.982 201.961 112.102 cv
200.881 112.053 200.041 112.029 199.154 112.029 cv
198.146 112.029 197.498 112.053 196.658 112.102 cv
196.49 111.982 196.465 111.645 196.609 111.502 cv
197.258 111.43 li
197.809 111.357 198.193 111.213 198.314 110.949 cv
198.65 110.086 198.625 107.158 198.625 106.006 cv
198.625 99.0703 li
198.625 98.3975 198.602 97.8926 198.098 97.3418 cv
197.762 97.0059 197.186 96.8369 196.609 96.7656 cv
196.201 96.7178 li
196.057 96.5742 196.057 96.2148 196.25 96.1172 cv
197.258 96.1895 198.529 96.1895 198.961 96.1895 cv
199.346 96.1895 199.754 96.166 200.066 96.1172 cv
200.547 97.3418 203.377 100.51 204.168 101.398 cv
206.498 104.014 li
208.154 105.861 209.328 107.205 210.457 108.357 cv
210.506 108.357 li
210.602 108.238 210.602 107.854 210.602 107.35 cv
210.602 102.213 li
210.602 101.085 210.578 97.9658 210.121 97.2451 cv
209.977 97.0293 209.594 96.8848 208.635 96.7656 cv
208.227 96.7178 li
208.057 96.5742 208.082 96.1895 208.273 96.1172 cv
209.377 96.166 210.193 96.1895 211.105 96.1895 cv
212.139 96.1895 212.762 96.166 213.576 96.1172 cv
213.77 96.2383 213.77 96.5742 213.625 96.7178 cv
213.289 96.7656 li
212.521 96.8848 212.041 97.0781 211.945 97.2695 cv
211.537 98.1328 211.584 101.109 211.584 102.213 cv
211.584 107.949 li
cp
f
217.889 112.412 mo
215.871 112.412 214.6 111.789 214.143 111.525 cv
213.855 110.996 213.543 109.293 213.494 108.166 cv
213.615 107.996 213.977 107.949 214.07 108.094 cv
214.432 109.316 215.416 111.67 218.199 111.67 cv
220.215 111.67 221.199 110.349 221.199 108.91 cv
221.199 107.854 220.982 106.678 219.23 105.549 cv
216.953 104.061 li
215.752 103.27 214.359 101.9 214.359 99.9336 cv
214.359 97.6533 216.135 95.8057 219.256 95.8057 cv
220 95.8057 220.863 95.9502 221.488 96.1172 cv
221.801 96.2148 222.135 96.2617 222.326 96.2617 cv
222.543 96.8369 222.76 98.1816 222.76 99.1895 cv
222.662 99.334 222.279 99.4053 222.158 99.2617 cv
221.848 98.1094 221.199 96.5488 218.896 96.5488 cv
216.543 96.5488 216.039 98.1094 216.039 99.2148 cv
216.039 100.605 217.191 101.613 218.078 102.166 cv
220 103.365 li
221.512 104.301 223 105.693 223 107.973 cv
223 110.613 221.008 112.412 217.889 112.412 cv
f
grestore
gsave
0 0 mo
266 0 li
266 188 li
0 188 li
0 0 li
cp
clp
73.4805 123.02 mo
73.4053 122.944 73.4185 122.771 73.5176 122.722 cv
73.8525 122.746 74.4106 122.759 74.7954 122.759 cv
75.1426 122.759 75.7754 122.746 76.2095 122.722 cv
76.3213 122.759 76.3086 122.933 76.2344 123.02 cv
75.9497 123.044 li
75.6885 123.069 75.5396 123.144 75.5396 123.255 cv
75.5396 123.404 75.8003 124.036 76.1846 124.916 cv
76.8794 126.468 77.6113 128.019 78.3315 129.545 cv
78.6284 128.924 78.9634 128.229 79.2866 127.535 cv
79.3975 127.299 79.4844 127.088 79.4844 127.026 cv
79.4844 126.964 79.4473 126.853 79.3857 126.704 cv
78.9517 125.711 78.4927 124.719 78.0205 123.727 cv
77.8345 123.342 77.6484 123.081 77.2266 123.044 cv
76.9297 123.02 li
76.8423 122.92 76.8545 122.771 76.9546 122.722 cv
77.3135 122.746 77.7856 122.759 78.2813 122.759 cv
78.9014 122.759 79.3604 122.746 79.6465 122.722 cv
79.7324 122.759 79.7456 122.92 79.6704 123.02 cv
79.3486 123.044 li
78.8643 123.081 78.8525 123.168 79.0874 123.727 cv
79.3486 124.334 79.6953 125.116 80.0425 125.885 cv
80.2783 125.401 80.5015 124.93 80.7744 124.26 cv
81.2217 123.205 81.1597 123.069 80.7627 123.044 cv
80.3906 123.02 li
80.3037 122.896 80.3286 122.759 80.4155 122.722 cv
80.7505 122.746 81.1226 122.759 81.5815 122.759 cv
81.9907 122.759 82.4863 122.746 82.7725 122.722 cv
82.8584 122.759 82.8716 122.92 82.7964 123.02 cv
82.4375 123.044 li
81.9165 123.081 81.6924 123.64 81.4194 124.148 cv
81.1597 124.607 80.6387 125.687 80.4526 126.12 cv
80.3906 126.245 80.3403 126.369 80.3403 126.418 cv
80.3403 126.468 80.3657 126.567 80.4277 126.716 cv
80.8496 127.671 81.2837 128.602 81.6924 129.545 cv
82.0776 128.676 82.4497 127.808 82.8096 126.927 cv
83.0576 126.331 83.7144 124.682 83.8013 124.457 cv
83.9624 124.012 84.1733 123.479 84.1733 123.329 cv
84.1733 123.155 84.0244 123.057 83.7646 123.044 cv
83.4043 123.02 li
83.3057 122.907 83.3174 122.771 83.4175 122.722 cv
83.8887 122.746 84.2236 122.759 84.6074 122.759 cv
85.0796 122.759 85.4385 122.746 85.7617 122.722 cv
85.8604 122.759 85.8735 122.92 85.7866 123.02 cv
85.5503 123.044 li
84.9307 123.106 84.8184 123.479 84.0747 125.202 cv
83.1685 127.299 li
82.6235 128.564 82.1265 129.78 81.6187 131.107 cv
81.5815 131.133 81.5313 131.145 81.4697 131.145 cv
81.4077 131.145 81.3457 131.133 81.2954 131.107 cv
80.8984 130.004 80.1797 128.453 79.7944 127.584 cv
79.3486 128.49 78.6045 130.078 78.2446 131.107 cv
78.2075 131.133 78.1577 131.145 78.0957 131.145 cv
78.0337 131.145 77.9717 131.133 77.9097 131.107 cv
77.6987 130.587 77.2144 129.47 77.0537 129.11 cv
76.2593 127.386 75.4907 125.661 74.6836 123.938 cv
74.4473 123.429 74.2993 123.094 73.7783 123.044 cv
73.4805 123.02 li
cp
false sop
0 0 0 0 cmyk
f
89.2671 126.939 mo
88.6709 126.939 88.646 126.964 88.646 127.336 cv
88.646 129.086 li
88.646 130.388 88.708 130.562 89.4033 130.636 cv
89.7632 130.674 li
89.8369 130.723 89.812 130.946 89.7383 130.983 cv
89.0679 130.96 88.646 130.946 88.1631 130.946 cv
87.6289 130.946 87.207 130.971 86.7241 130.983 cv
86.6489 130.946 86.624 130.748 86.6992 130.674 cv
86.9102 130.636 li
87.604 130.512 87.6289 130.388 87.6289 129.086 cv
87.6289 124.619 li
87.6289 123.317 87.542 123.106 86.897 123.057 cv
86.5752 123.031 li
86.5 122.982 86.5249 122.759 86.6001 122.722 cv
87.207 122.734 87.6289 122.759 88.1631 122.759 cv
88.646 122.759 89.0679 122.746 89.6021 122.722 cv
89.6763 122.759 89.7012 122.982 89.626 123.031 cv
89.3911 123.057 li
88.6709 123.131 88.646 123.317 88.646 124.619 cv
88.646 126.046 li
88.646 126.431 88.6709 126.443 89.2671 126.443 cv
92.8149 126.443 li
93.4102 126.443 93.4351 126.431 93.4351 126.046 cv
93.4351 124.619 li
93.4351 123.317 93.4102 123.131 92.6782 123.057 cv
92.4429 123.031 li
92.3682 122.982 92.3931 122.759 92.4673 122.722 cv
93.0381 122.746 93.46 122.759 93.9692 122.759 cv
94.4521 122.759 94.874 122.746 95.4331 122.722 cv
95.5073 122.759 95.5322 122.982 95.457 123.031 cv
95.1973 123.057 li
94.4771 123.131 94.4521 123.317 94.4521 124.619 cv
94.4521 129.086 li
94.4521 130.388 94.4771 130.549 95.1973 130.636 cv
95.4951 130.674 li
95.5693 130.723 95.5439 130.946 95.4702 130.983 cv
94.874 130.96 94.4521 130.946 93.9692 130.946 cv
93.46 130.946 93.0132 130.96 92.4673 130.983 cv
92.3931 130.946 92.3682 130.748 92.4429 130.674 cv
92.6782 130.636 li
93.4351 130.512 93.4351 130.388 93.4351 129.086 cv
93.4351 127.336 li
93.4351 126.964 93.4102 126.939 92.8149 126.939 cv
89.2671 126.939 li
cp
f
98.2441 124.645 mo
98.2441 123.329 98.2192 123.118 97.4873 123.057 cv
97.1772 123.031 li
97.103 122.982 97.127 122.759 97.2021 122.722 cv
97.8223 122.746 98.2441 122.759 98.7651 122.759 cv
99.2612 122.759 99.6831 122.746 100.303 122.722 cv
100.378 122.759 100.403 122.982 100.328 123.031 cv
100.018 123.057 li
99.2861 123.118 99.2612 123.329 99.2612 124.645 cv
99.2612 129.061 li
99.2612 130.376 99.2861 130.549 100.018 130.636 cv
100.328 130.674 li
100.403 130.723 100.378 130.946 100.303 130.983 cv
99.6831 130.959 99.2612 130.946 98.7651 130.946 cv
98.2441 130.946 97.8223 130.959 97.2021 130.983 cv
97.127 130.946 97.103 130.748 97.1772 130.674 cv
97.4873 130.636 li
98.2192 130.549 98.2441 130.376 98.2441 129.061 cv
98.2441 124.645 li
cp
f
106.032 129.086 mo
106.032 130.388 106.057 130.574 106.777 130.636 cv
107.174 130.674 li
107.248 130.723 107.223 130.946 107.149 130.982 cv
106.442 130.959 106.02 130.946 105.524 130.946 cv
105.028 130.946 104.593 130.959 103.799 130.982 cv
103.725 130.946 103.7 130.735 103.799 130.674 cv
104.246 130.636 li
104.953 130.574 105.015 130.388 105.015 129.086 cv
105.015 123.54 li
105.015 123.155 105.015 123.144 104.643 123.144 cv
103.961 123.144 li
103.427 123.144 102.745 123.168 102.435 123.453 cv
102.137 123.727 102.013 123.999 101.876 124.31 cv
101.777 124.384 101.603 124.322 101.554 124.223 cv
101.752 123.664 101.938 122.87 102.025 122.374 cv
102.062 122.35 102.224 122.337 102.261 122.374 cv
102.335 122.771 102.745 122.759 103.316 122.759 cv
108.34 122.759 li
109.01 122.759 109.121 122.734 109.307 122.411 cv
109.369 122.387 109.506 122.398 109.531 122.448 cv
109.394 122.957 109.307 123.962 109.345 124.334 cv
109.295 124.434 109.084 124.434 109.022 124.359 cv
108.985 124.049 108.898 123.59 108.712 123.453 cv
108.427 123.242 107.955 123.144 107.273 123.144 cv
106.392 123.144 li
106.02 123.144 106.032 123.155 106.032 123.564 cv
106.032 129.086 li
cp
f
111.859 124.645 mo
111.859 123.329 111.834 123.118 111.102 123.057 cv
110.792 123.031 li
110.718 122.982 110.742 122.759 110.817 122.722 cv
111.437 122.746 111.859 122.759 112.38 122.759 cv
112.876 122.759 113.298 122.746 113.918 122.722 cv
113.993 122.759 114.018 122.982 113.943 123.031 cv
113.633 123.057 li
112.901 123.118 112.876 123.329 112.876 124.645 cv
112.876 129.061 li
112.876 130.376 112.901 130.549 113.633 130.636 cv
113.943 130.674 li
114.018 130.723 113.993 130.946 113.918 130.983 cv
113.298 130.959 112.876 130.946 112.38 130.946 cv
111.859 130.946 111.437 130.959 110.817 130.983 cv
110.742 130.946 110.718 130.748 110.792 130.674 cv
111.102 130.636 li
111.834 130.549 111.859 130.376 111.859 129.061 cv
111.859 124.645 li
cp
f
123.345 128.837 mo
123.345 129.21 123.345 130.686 123.382 131.009 cv
123.357 131.083 123.283 131.145 123.146 131.145 cv
122.997 130.934 122.637 130.5 121.558 129.271 cv
118.68 125.996 li
118.345 125.612 117.501 124.595 117.241 124.322 cv
117.217 124.322 li
117.167 124.471 117.155 124.756 117.155 125.128 cv
117.155 127.833 li
117.155 128.416 117.167 130.028 117.378 130.4 cv
117.452 130.537 117.7 130.611 118.011 130.636 cv
118.395 130.674 li
118.47 130.772 118.457 130.922 118.37 130.982 cv
117.812 130.959 117.378 130.946 116.919 130.946 cv
116.397 130.946 116.063 130.959 115.629 130.982 cv
115.542 130.922 115.53 130.748 115.604 130.674 cv
115.938 130.636 li
116.224 130.599 116.423 130.523 116.485 130.388 cv
116.658 129.94 116.646 128.428 116.646 127.833 cv
116.646 124.247 li
116.646 123.9 116.634 123.64 116.373 123.354 cv
116.199 123.181 115.902 123.094 115.604 123.057 cv
115.393 123.031 li
115.319 122.957 115.319 122.771 115.417 122.722 cv
115.938 122.759 116.596 122.759 116.82 122.759 cv
117.018 122.759 117.229 122.746 117.39 122.722 cv
117.638 123.354 119.102 124.992 119.512 125.451 cv
120.715 126.803 li
121.571 127.758 122.178 128.453 122.762 129.048 cv
122.786 129.048 li
122.836 128.986 122.836 128.788 122.836 128.527 cv
122.836 125.872 li
122.836 125.289 122.824 123.677 122.588 123.305 cv
122.513 123.193 122.314 123.118 121.819 123.057 cv
121.608 123.031 li
121.521 122.957 121.533 122.759 121.633 122.722 cv
122.203 122.746 122.625 122.759 123.096 122.759 cv
123.63 122.759 123.952 122.746 124.374 122.722 cv
124.474 122.783 124.474 122.957 124.399 123.031 cv
124.225 123.057 li
123.828 123.118 123.58 123.218 123.531 123.317 cv
123.32 123.764 123.345 125.302 123.345 125.872 cv
123.345 128.837 li
cp
f
133.127 129.681 mo
133.127 130.177 133.202 130.475 133.426 130.562 cv
133.462 130.599 133.462 130.674 133.413 130.711 cv
133.265 130.711 133.04 130.76 132.805 130.822 cv
132.147 130.996 131.254 131.145 130.584 131.145 cv
129.108 131.145 127.755 130.735 126.8 129.768 cv
126.056 129.023 125.659 128.043 125.659 126.952 cv
125.659 125.897 126.006 124.83 126.775 124.012 cv
127.606 123.144 128.835 122.561 130.708 122.561 cv
131.416 122.561 132.073 122.696 132.284 122.746 cv
132.52 122.796 132.904 122.883 133.054 122.858 cv
133.054 123.268 133.127 123.912 133.239 124.657 cv
133.202 124.756 132.979 124.769 132.904 124.694 cv
132.558 123.354 131.626 122.933 130.361 122.933 cv
127.955 122.933 126.899 124.645 126.899 126.505 cv
126.899 128.887 128.128 130.76 130.622 130.76 cv
131.391 130.76 131.85 130.599 131.986 130.388 cv
132.048 130.301 132.11 130.078 132.11 129.681 cv
132.11 129.185 li
132.11 128.143 132.073 128.068 131.304 127.981 cv
130.758 127.919 li
130.658 127.87 130.671 127.646 130.758 127.609 cv
131.117 127.634 131.8 127.646 132.532 127.646 cv
133.017 127.646 133.438 127.634 133.848 127.609 cv
133.935 127.66 133.946 127.845 133.859 127.919 cv
133.661 127.944 li
133.141 128.006 133.127 128.354 133.127 128.986 cv
133.127 129.681 li
cp
f
141.471 131.145 mo
140.429 131.145 139.771 130.822 139.536 130.686 cv
139.387 130.413 139.225 129.532 139.201 128.949 cv
139.263 128.862 139.448 128.837 139.498 128.912 cv
139.685 129.545 140.192 130.76 141.632 130.76 cv
142.674 130.76 143.183 130.078 143.183 129.334 cv
143.183 128.788 143.07 128.18 142.166 127.597 cv
140.986 126.828 li
140.367 126.418 139.646 125.711 139.646 124.694 cv
139.646 123.516 140.564 122.561 142.178 122.561 cv
142.563 122.561 143.009 122.635 143.332 122.722 cv
143.493 122.771 143.667 122.796 143.766 122.796 cv
143.878 123.094 143.988 123.788 143.988 124.31 cv
143.939 124.384 143.74 124.421 143.679 124.347 cv
143.518 123.751 143.183 122.944 141.992 122.944 cv
140.775 122.944 140.516 123.751 140.516 124.322 cv
140.516 125.04 141.11 125.563 141.569 125.848 cv
142.563 126.468 li
143.344 126.952 144.113 127.671 144.113 128.85 cv
144.113 130.215 143.084 131.145 141.471 131.145 cv
f
147.174 123.614 mo
148.08 122.907 149.233 122.561 150.524 122.561 cv
151.194 122.561 152.137 122.696 152.72 122.858 cv
152.868 122.896 152.955 122.92 153.067 122.907 cv
153.079 123.193 153.142 123.975 153.24 124.731 cv
153.179 124.818 152.992 124.83 152.905 124.756 cv
152.72 123.912 152.161 122.944 150.362 122.944 cv
148.464 122.944 146.852 124.148 146.852 126.716 cv
146.852 129.321 148.502 130.761 150.536 130.761 cv
152.137 130.761 152.844 129.719 153.129 128.986 cv
153.216 128.924 153.402 128.949 153.451 129.036 cv
153.364 129.681 153.042 130.5 152.856 130.735 cv
152.707 130.761 152.559 130.81 152.422 130.859 cv
152.149 130.959 151.256 131.145 150.462 131.145 cv
149.346 131.145 148.278 130.922 147.373 130.313 cv
146.38 129.631 145.611 128.502 145.611 126.902 cv
145.611 125.525 146.231 124.347 147.174 123.614 cv
f
157.517 126.939 mo
156.921 126.939 156.896 126.964 156.896 127.336 cv
156.896 129.086 li
156.896 130.388 156.958 130.562 157.652 130.636 cv
158.013 130.674 li
158.087 130.723 158.063 130.946 157.987 130.983 cv
157.317 130.96 156.896 130.946 156.412 130.946 cv
155.879 130.946 155.457 130.971 154.974 130.983 cv
154.898 130.946 154.874 130.748 154.948 130.674 cv
155.159 130.636 li
155.854 130.512 155.879 130.388 155.879 129.086 cv
155.879 124.619 li
155.879 123.317 155.792 123.106 155.146 123.057 cv
154.824 123.031 li
154.75 122.982 154.774 122.759 154.85 122.722 cv
155.457 122.734 155.879 122.759 156.412 122.759 cv
156.896 122.759 157.317 122.746 157.852 122.722 cv
157.926 122.759 157.95 122.982 157.876 123.031 cv
157.641 123.057 li
156.921 123.131 156.896 123.317 156.896 124.619 cv
156.896 126.046 li
156.896 126.431 156.921 126.443 157.517 126.443 cv
161.064 126.443 li
161.659 126.443 161.685 126.431 161.685 126.046 cv
161.685 124.619 li
161.685 123.317 161.659 123.131 160.928 123.057 cv
160.692 123.031 li
160.617 122.982 160.643 122.759 160.717 122.722 cv
161.287 122.746 161.71 122.759 162.219 122.759 cv
162.701 122.759 163.124 122.746 163.683 122.722 cv
163.757 122.759 163.781 122.982 163.707 123.031 cv
163.446 123.057 li
162.727 123.131 162.701 123.317 162.701 124.619 cv
162.701 129.086 li
162.701 130.388 162.727 130.549 163.446 130.636 cv
163.744 130.674 li
163.818 130.723 163.794 130.946 163.72 130.983 cv
163.124 130.96 162.701 130.946 162.219 130.946 cv
161.71 130.946 161.263 130.96 160.717 130.983 cv
160.643 130.946 160.617 130.748 160.692 130.674 cv
160.928 130.636 li
161.685 130.512 161.685 130.388 161.685 129.086 cv
161.685 127.336 li
161.685 126.964 161.659 126.939 161.064 126.939 cv
157.517 126.939 li
cp
f
172.819 127.2 mo
172.819 125.153 171.914 122.944 169.545 122.944 cv
168.255 122.944 166.58 123.825 166.58 126.542 cv
166.58 128.378 167.473 130.76 169.917 130.76 cv
171.404 130.76 172.819 129.644 172.819 127.2 cv
165.34 126.939 mo
165.34 124.458 167.2 122.561 169.756 122.561 cv
172.621 122.561 174.06 124.632 174.06 126.815 cv
174.06 129.321 172.149 131.145 169.756 131.145 cv
167.002 131.145 165.34 129.172 165.34 126.939 cv
f
183.298 127.2 mo
183.298 125.153 182.392 122.944 180.022 122.944 cv
178.732 122.944 177.058 123.825 177.058 126.542 cv
177.058 128.378 177.951 130.76 180.395 130.76 cv
181.883 130.76 183.298 129.644 183.298 127.2 cv
175.818 126.939 mo
175.818 124.458 177.678 122.561 180.234 122.561 cv
183.099 122.561 184.538 124.632 184.538 126.815 cv
184.538 129.321 182.628 131.145 180.234 131.145 cv
177.479 131.145 175.818 129.172 175.818 126.939 cv
f
187.213 124.619 mo
187.213 123.317 187.188 123.118 186.407 123.057 cv
186.096 123.031 li
186.021 122.982 186.047 122.759 186.121 122.722 cv
186.815 122.746 187.238 122.759 187.734 122.759 cv
188.218 122.759 188.64 122.746 189.26 122.722 cv
189.334 122.759 189.359 122.982 189.285 123.031 cv
188.987 123.057 li
188.255 123.118 188.229 123.317 188.229 124.619 cv
188.229 128.937 li
188.229 129.718 188.268 130.041 188.491 130.276 cv
188.627 130.413 188.863 130.562 189.843 130.562 cv
190.897 130.562 191.158 130.512 191.356 130.4 cv
191.604 130.252 191.927 129.805 192.175 129.172 cv
192.25 129.11 192.485 129.16 192.485 129.247 cv
192.485 129.383 192.138 130.648 191.964 130.983 cv
191.332 130.959 190.153 130.946 188.875 130.946 cv
187.734 130.946 li
187.213 130.946 186.815 130.959 186.121 130.983 cv
186.047 130.946 186.021 130.748 186.096 130.674 cv
186.469 130.636 li
187.188 130.562 187.213 130.388 187.213 129.086 cv
187.213 124.619 li
cp
f
83.2529 140.342 mo
82.5327 141.31 82.0498 142.785 82.0117 143.443 cv
81.9868 143.877 82.1611 144.238 82.521 144.238 cv
82.7939 144.238 83.104 144.125 83.501 143.592 cv
84.0469 142.86 84.6299 141.223 84.6548 140.565 cv
84.667 140.181 84.5928 139.746 84.1587 139.746 cv
83.9097 139.746 83.6128 139.858 83.2529 140.342 cv
85.5107 140.938 mo
85.4741 141.619 85.1138 142.811 84.1958 143.753 cv
83.4268 144.547 82.7568 144.609 82.4219 144.609 cv
81.6279 144.609 81.1069 144.026 81.1807 142.959 cv
81.231 142.19 81.6899 140.988 82.5327 140.181 cv
83.1787 139.561 83.7368 139.374 84.2451 139.374 cv
85.126 139.374 85.561 140.031 85.5107 140.938 cv
f
89.1055 140.007 mo
89.0313 140.218 88.9326 140.614 88.7837 141.16 cv
88.4116 142.55 88.0767 143.741 87.6797 145.105 cv
87.3564 146.222 86.9473 146.854 86.6997 147.103 cv
86.5137 147.276 85.9424 147.772 85.2104 147.772 cv
84.5405 147.772 84.3047 147.351 84.3047 147.165 cv
84.3047 146.917 84.4536 146.706 84.5903 146.606 cv
84.6895 146.532 84.8003 146.568 84.8755 146.656 cv
85.1733 146.966 85.5454 147.165 85.8184 147.165 cv
86.0664 147.165 86.3267 147.078 86.6123 146.123 cv
87.1826 144.163 87.6177 142.028 88.2124 140.007 cv
87.1826 140.007 li
87.0586 139.896 87.1084 139.659 87.2695 139.548 cv
88.3364 139.548 li
88.6597 138.432 88.9946 137.464 89.7266 136.596 cv
90.3467 135.863 90.9917 135.565 91.7104 135.565 cv
92.1694 135.565 92.6665 135.889 92.6665 136.385 cv
92.6665 136.707 92.3315 137.092 92.1323 137.092 cv
92.0215 137.092 91.9717 136.979 91.9595 136.893 cv
91.9214 136.211 91.5747 135.986 91.2646 135.986 cv
90.9917 135.986 90.6563 136.235 90.3716 136.657 cv
89.8003 137.488 89.5527 138.369 89.2173 139.548 cv
90.7686 139.548 li
90.8555 139.685 90.8306 139.87 90.6445 140.007 cv
89.1055 140.007 li
cp
f
96.3467 138.108 mo
96.3467 136.818 96.3218 136.633 95.5898 136.547 cv
95.3916 136.521 li
95.3169 136.472 95.3418 136.248 95.4165 136.211 cv
95.9497 136.235 96.3716 136.248 96.8799 136.248 cv
99.2129 136.248 li
100.007 136.248 100.739 136.248 100.888 136.211 cv
100.962 136.422 101.036 137.314 101.086 137.86 cv
101.036 137.936 100.838 137.96 100.776 137.886 cv
100.59 137.303 100.478 136.868 99.8325 136.707 cv
99.5728 136.645 99.1758 136.633 98.6299 136.633 cv
97.7368 136.633 li
97.3638 136.633 97.3638 136.657 97.3638 137.13 cv
97.3638 139.609 li
97.3638 139.957 97.4019 139.957 97.7739 139.957 cv
98.4927 139.957 li
99.0137 139.957 99.3989 139.933 99.5479 139.883 cv
99.6968 139.833 99.7837 139.759 99.8457 139.448 cv
99.9448 138.94 li
100.007 138.865 100.218 138.865 100.267 138.952 cv
100.267 139.25 100.218 139.734 100.218 140.205 cv
100.218 140.652 100.267 141.123 100.267 141.396 cv
100.218 141.483 100.007 141.483 99.9448 141.408 cv
99.8325 140.925 li
99.7837 140.701 99.6968 140.516 99.4487 140.453 cv
99.2749 140.403 98.9766 140.392 98.4927 140.392 cv
97.7739 140.392 li
97.4019 140.392 97.3638 140.403 97.3638 140.727 cv
97.3638 142.476 li
97.3638 143.133 97.4019 143.555 97.5996 143.766 cv
97.7485 143.914 98.0088 144.051 99.1006 144.051 cv
100.056 144.051 100.416 144.001 100.688 143.865 cv
100.912 143.741 101.247 143.307 101.57 142.661 cv
101.657 142.6 101.83 142.637 101.88 142.748 cv
101.792 143.183 101.483 144.138 101.322 144.473 cv
100.205 144.448 99.1006 144.436 97.9966 144.436 cv
96.8799 144.436 li
96.3467 144.436 95.9248 144.448 95.1929 144.473 cv
95.1187 144.436 95.0938 144.237 95.1675 144.163 cv
95.5776 144.125 li
96.2847 144.063 96.3467 143.877 96.3467 142.575 cv
96.3467 138.108 li
cp
f
110.883 142.326 mo
110.883 142.699 110.883 144.175 110.92 144.498 cv
110.895 144.572 110.821 144.634 110.684 144.634 cv
110.535 144.423 110.175 143.989 109.096 142.761 cv
106.218 139.485 li
105.883 139.102 105.04 138.084 104.779 137.812 cv
104.755 137.812 li
104.705 137.96 104.693 138.245 104.693 138.617 cv
104.693 141.322 li
104.693 141.905 104.705 143.518 104.916 143.89 cv
104.99 144.026 105.238 144.101 105.549 144.125 cv
105.933 144.163 li
106.008 144.262 105.995 144.411 105.908 144.473 cv
105.35 144.448 104.916 144.436 104.457 144.436 cv
103.936 144.436 103.601 144.448 103.167 144.473 cv
103.08 144.411 103.068 144.237 103.142 144.163 cv
103.477 144.125 li
103.762 144.088 103.961 144.014 104.023 143.877 cv
104.196 143.431 104.184 141.917 104.184 141.322 cv
104.184 137.736 li
104.184 137.39 104.172 137.129 103.911 136.844 cv
103.737 136.67 103.44 136.583 103.142 136.546 cv
102.931 136.521 li
102.857 136.446 102.857 136.261 102.956 136.211 cv
103.477 136.248 104.134 136.248 104.358 136.248 cv
104.556 136.248 104.767 136.235 104.928 136.211 cv
105.176 136.844 106.64 138.48 107.05 138.94 cv
108.253 140.292 li
109.109 141.247 109.716 141.942 110.3 142.537 cv
110.324 142.537 li
110.374 142.476 110.374 142.277 110.374 142.017 cv
110.374 139.361 li
110.374 138.778 110.362 137.166 110.126 136.794 cv
110.051 136.683 109.853 136.607 109.357 136.546 cv
109.146 136.521 li
109.059 136.446 109.071 136.248 109.171 136.211 cv
109.741 136.235 110.163 136.248 110.634 136.248 cv
111.168 136.248 111.49 136.235 111.912 136.211 cv
112.012 136.272 112.012 136.446 111.937 136.521 cv
111.763 136.546 li
111.366 136.607 111.118 136.707 111.069 136.807 cv
110.858 137.253 110.883 138.791 110.883 139.361 cv
110.883 142.326 li
cp
f
120.356 143.17 mo
120.356 143.666 120.431 143.964 120.654 144.051 cv
120.691 144.088 120.691 144.163 120.642 144.2 cv
120.493 144.2 120.269 144.249 120.034 144.312 cv
119.376 144.485 118.483 144.634 117.813 144.634 cv
116.337 144.634 114.984 144.225 114.029 143.257 cv
113.285 142.513 112.888 141.532 112.888 140.44 cv
112.888 139.387 113.235 138.319 114.004 137.501 cv
114.835 136.633 116.064 136.05 117.937 136.05 cv
118.644 136.05 119.302 136.186 119.513 136.235 cv
119.748 136.285 120.133 136.372 120.282 136.348 cv
120.282 136.757 120.356 137.401 120.468 138.146 cv
120.431 138.245 120.207 138.258 120.133 138.184 cv
119.786 136.844 118.855 136.422 117.59 136.422 cv
115.183 136.422 114.128 138.134 114.128 139.994 cv
114.128 142.376 115.357 144.249 117.85 144.249 cv
118.619 144.249 119.078 144.088 119.215 143.877 cv
119.277 143.79 119.339 143.567 119.339 143.17 cv
119.339 142.674 li
119.339 141.632 119.302 141.558 118.533 141.471 cv
117.987 141.408 li
117.887 141.359 117.9 141.136 117.987 141.099 cv
118.346 141.123 119.029 141.136 119.761 141.136 cv
120.245 141.136 120.666 141.123 121.076 141.099 cv
121.163 141.148 121.175 141.334 121.088 141.408 cv
120.89 141.434 li
120.369 141.495 120.356 141.843 120.356 142.476 cv
120.356 143.17 li
cp
f
123.763 138.134 mo
123.763 136.818 123.738 136.607 123.006 136.546 cv
122.696 136.521 li
122.622 136.472 122.646 136.248 122.721 136.211 cv
123.341 136.235 123.763 136.248 124.284 136.248 cv
124.78 136.248 125.202 136.235 125.822 136.211 cv
125.897 136.248 125.922 136.472 125.847 136.521 cv
125.537 136.546 li
124.805 136.607 124.78 136.818 124.78 138.134 cv
124.78 142.55 li
124.78 143.865 124.805 144.039 125.537 144.125 cv
125.847 144.163 li
125.922 144.212 125.897 144.436 125.822 144.473 cv
125.202 144.448 124.78 144.436 124.284 144.436 cv
123.763 144.436 123.341 144.448 122.721 144.473 cv
122.646 144.436 122.622 144.238 122.696 144.163 cv
123.006 144.125 li
123.738 144.039 123.763 143.865 123.763 142.55 cv
123.763 138.134 li
cp
f
135.248 142.326 mo
135.248 142.699 135.248 144.175 135.285 144.498 cv
135.26 144.572 135.186 144.634 135.049 144.634 cv
134.9 144.423 134.54 143.989 133.461 142.761 cv
130.583 139.485 li
130.248 139.102 129.405 138.084 129.144 137.812 cv
129.12 137.812 li
129.07 137.96 129.058 138.245 129.058 138.617 cv
129.058 141.322 li
129.058 141.905 129.07 143.518 129.281 143.89 cv
129.355 144.026 129.603 144.101 129.914 144.125 cv
130.298 144.163 li
130.373 144.262 130.36 144.411 130.273 144.473 cv
129.715 144.448 129.281 144.436 128.822 144.436 cv
128.301 144.436 127.966 144.448 127.532 144.473 cv
127.445 144.411 127.433 144.237 127.507 144.163 cv
127.842 144.125 li
128.127 144.088 128.326 144.014 128.388 143.877 cv
128.561 143.431 128.549 141.917 128.549 141.322 cv
128.549 137.736 li
128.549 137.39 128.537 137.129 128.276 136.844 cv
128.102 136.67 127.805 136.583 127.507 136.546 cv
127.296 136.521 li
127.222 136.446 127.222 136.261 127.321 136.211 cv
127.842 136.248 128.499 136.248 128.723 136.248 cv
128.921 136.248 129.132 136.235 129.293 136.211 cv
129.541 136.844 131.005 138.48 131.415 138.94 cv
132.618 140.292 li
133.474 141.247 134.081 141.942 134.665 142.537 cv
134.689 142.537 li
134.739 142.476 134.739 142.277 134.739 142.017 cv
134.739 139.361 li
134.739 138.778 134.727 137.166 134.491 136.794 cv
134.416 136.683 134.218 136.607 133.722 136.546 cv
133.511 136.521 li
133.424 136.446 133.436 136.248 133.536 136.211 cv
134.106 136.235 134.528 136.248 134.999 136.248 cv
135.533 136.248 135.855 136.235 136.277 136.211 cv
136.377 136.272 136.377 136.446 136.302 136.521 cv
136.128 136.546 li
135.731 136.607 135.483 136.707 135.434 136.807 cv
135.223 137.253 135.248 138.791 135.248 139.361 cv
135.248 142.326 li
cp
f
138.902 138.108 mo
138.902 136.818 138.878 136.633 138.146 136.547 cv
137.948 136.521 li
137.873 136.472 137.897 136.248 137.973 136.211 cv
138.506 136.235 138.928 136.248 139.436 136.248 cv
141.769 136.248 li
142.563 136.248 143.295 136.248 143.443 136.211 cv
143.518 136.422 143.592 137.314 143.642 137.86 cv
143.592 137.936 143.394 137.96 143.332 137.886 cv
143.146 137.303 143.034 136.868 142.389 136.707 cv
142.129 136.645 141.731 136.633 141.186 136.633 cv
140.292 136.633 li
139.92 136.633 139.92 136.657 139.92 137.13 cv
139.92 139.609 li
139.92 139.957 139.958 139.957 140.33 139.957 cv
141.049 139.957 li
141.569 139.957 141.955 139.933 142.104 139.883 cv
142.253 139.833 142.34 139.759 142.401 139.448 cv
142.501 138.94 li
142.563 138.865 142.773 138.865 142.823 138.952 cv
142.823 139.25 142.773 139.734 142.773 140.205 cv
142.773 140.652 142.823 141.123 142.823 141.396 cv
142.773 141.483 142.563 141.483 142.501 141.408 cv
142.389 140.925 li
142.34 140.701 142.253 140.516 142.005 140.453 cv
141.831 140.403 141.533 140.392 141.049 140.392 cv
140.33 140.392 li
139.958 140.392 139.92 140.403 139.92 140.727 cv
139.92 142.476 li
139.92 143.133 139.958 143.555 140.156 143.766 cv
140.305 143.914 140.564 144.051 141.657 144.051 cv
142.611 144.051 142.972 144.001 143.245 143.865 cv
143.468 143.741 143.803 143.307 144.126 142.661 cv
144.213 142.6 144.386 142.637 144.436 142.748 cv
144.349 143.183 144.039 144.138 143.878 144.473 cv
142.761 144.448 141.657 144.436 140.553 144.436 cv
139.436 144.436 li
138.902 144.436 138.48 144.448 137.749 144.473 cv
137.675 144.436 137.649 144.237 137.724 144.163 cv
138.134 144.125 li
138.841 144.063 138.902 143.877 138.902 142.575 cv
138.902 138.108 li
cp
f
146.765 138.108 mo
146.765 136.818 146.739 136.633 146.008 136.547 cv
145.81 136.521 li
145.734 136.472 145.76 136.248 145.835 136.211 cv
146.367 136.235 146.79 136.248 147.298 136.248 cv
149.631 136.248 li
150.425 136.248 151.156 136.248 151.306 136.211 cv
151.38 136.422 151.453 137.314 151.504 137.86 cv
151.453 137.936 151.256 137.96 151.193 137.886 cv
151.008 137.303 150.896 136.868 150.251 136.707 cv
149.99 136.645 149.594 136.633 149.048 136.633 cv
148.154 136.633 li
147.781 136.633 147.781 136.657 147.781 137.13 cv
147.781 139.609 li
147.781 139.957 147.819 139.957 148.191 139.957 cv
148.91 139.957 li
149.432 139.957 149.816 139.933 149.966 139.883 cv
150.114 139.833 150.201 139.759 150.264 139.448 cv
150.362 138.94 li
150.425 138.865 150.636 138.865 150.685 138.952 cv
150.685 139.25 150.636 139.734 150.636 140.205 cv
150.636 140.652 150.685 141.123 150.685 141.396 cv
150.636 141.483 150.425 141.483 150.362 141.408 cv
150.251 140.925 li
150.201 140.701 150.114 140.516 149.866 140.453 cv
149.692 140.403 149.395 140.392 148.91 140.392 cv
148.191 140.392 li
147.819 140.392 147.781 140.403 147.781 140.727 cv
147.781 142.476 li
147.781 143.133 147.819 143.555 148.018 143.766 cv
148.167 143.914 148.427 144.051 149.519 144.051 cv
150.474 144.051 150.834 144.001 151.106 143.865 cv
151.33 143.741 151.665 143.307 151.987 142.661 cv
152.074 142.6 152.248 142.637 152.298 142.748 cv
152.211 143.183 151.9 144.138 151.739 144.473 cv
150.623 144.448 149.519 144.436 148.415 144.436 cv
147.298 144.436 li
146.765 144.436 146.343 144.448 145.61 144.473 cv
145.536 144.436 145.512 144.237 145.586 144.163 cv
145.995 144.125 li
146.702 144.063 146.765 143.877 146.765 142.575 cv
146.765 138.108 li
cp
f
155.644 139.896 mo
155.644 140.118 155.644 140.255 155.682 140.305 cv
155.719 140.342 155.904 140.366 156.537 140.366 cv
156.983 140.366 157.456 140.317 157.814 140.044 cv
158.149 139.783 158.436 139.35 158.436 138.506 cv
158.436 137.525 157.827 136.596 156.45 136.596 cv
155.682 136.596 155.644 136.645 155.644 136.992 cv
155.644 139.896 li
cp
154.627 138.121 mo
154.627 136.942 154.59 136.731 154.081 136.67 cv
153.684 136.62 li
153.597 136.559 153.597 136.359 153.696 136.31 cv
154.391 136.248 155.247 136.211 156.463 136.211 cv
157.231 136.211 157.964 136.272 158.534 136.582 cv
159.13 136.893 159.563 137.451 159.563 138.319 cv
159.563 139.498 158.634 140.144 158.014 140.392 cv
157.951 140.466 158.014 140.59 158.075 140.689 cv
159.067 142.289 159.726 143.282 160.568 143.989 cv
160.779 144.175 161.09 144.312 161.425 144.336 cv
161.486 144.361 161.499 144.46 161.437 144.51 cv
161.325 144.547 161.127 144.572 160.892 144.572 cv
159.837 144.572 159.205 144.262 158.323 143.009 cv
158.001 142.55 157.492 141.694 157.107 141.136 cv
156.922 140.863 156.724 140.738 156.227 140.738 cv
155.669 140.738 155.644 140.751 155.644 141.012 cv
155.644 142.575 li
155.644 143.877 155.669 144.026 156.389 144.124 cv
156.648 144.163 li
156.724 144.225 156.698 144.436 156.624 144.473 cv
156.065 144.448 155.644 144.436 155.147 144.436 cv
154.627 144.436 154.18 144.448 153.597 144.473 cv
153.522 144.436 153.498 144.249 153.571 144.163 cv
153.883 144.124 li
154.602 144.039 154.627 143.877 154.627 142.575 cv
154.627 138.121 li
cp
f
163.244 138.134 mo
163.244 136.818 163.22 136.607 162.487 136.546 cv
162.178 136.521 li
162.104 136.472 162.128 136.248 162.202 136.211 cv
162.822 136.235 163.244 136.248 163.766 136.248 cv
164.262 136.248 164.684 136.235 165.304 136.211 cv
165.379 136.248 165.403 136.472 165.328 136.521 cv
165.019 136.546 li
164.286 136.607 164.262 136.818 164.262 138.134 cv
164.262 142.55 li
164.262 143.865 164.286 144.039 165.019 144.125 cv
165.328 144.163 li
165.403 144.212 165.379 144.436 165.304 144.473 cv
164.684 144.448 164.262 144.436 163.766 144.436 cv
163.244 144.436 162.822 144.448 162.202 144.473 cv
162.128 144.436 162.104 144.238 162.178 144.163 cv
162.487 144.125 li
163.22 144.039 163.244 143.865 163.244 142.55 cv
163.244 138.134 li
cp
f
174.73 142.326 mo
174.73 142.699 174.73 144.175 174.767 144.498 cv
174.742 144.572 174.668 144.634 174.531 144.634 cv
174.382 144.423 174.022 143.989 172.943 142.761 cv
170.065 139.485 li
169.73 139.102 168.887 138.084 168.626 137.812 cv
168.602 137.812 li
168.552 137.96 168.54 138.245 168.54 138.617 cv
168.54 141.322 li
168.54 141.905 168.552 143.518 168.763 143.89 cv
168.837 144.026 169.085 144.101 169.396 144.125 cv
169.78 144.163 li
169.855 144.262 169.842 144.411 169.755 144.473 cv
169.197 144.448 168.763 144.436 168.304 144.436 cv
167.783 144.436 167.448 144.448 167.014 144.473 cv
166.927 144.411 166.915 144.237 166.989 144.163 cv
167.324 144.125 li
167.609 144.088 167.808 144.014 167.87 143.877 cv
168.043 143.431 168.031 141.917 168.031 141.322 cv
168.031 137.736 li
168.031 137.39 168.019 137.129 167.758 136.844 cv
167.584 136.67 167.287 136.583 166.989 136.546 cv
166.778 136.521 li
166.704 136.446 166.704 136.261 166.803 136.211 cv
167.324 136.248 167.981 136.248 168.205 136.248 cv
168.403 136.248 168.614 136.235 168.775 136.211 cv
169.023 136.844 170.487 138.48 170.897 138.94 cv
172.1 140.292 li
172.956 141.247 173.563 141.942 174.147 142.537 cv
174.171 142.537 li
174.221 142.476 174.221 142.277 174.221 142.017 cv
174.221 139.361 li
174.221 138.778 174.209 137.166 173.973 136.794 cv
173.898 136.683 173.7 136.607 173.204 136.546 cv
172.993 136.521 li
172.906 136.446 172.918 136.248 173.018 136.211 cv
173.588 136.235 174.01 136.248 174.481 136.248 cv
175.015 136.248 175.337 136.235 175.759 136.211 cv
175.859 136.272 175.859 136.446 175.784 136.521 cv
175.61 136.546 li
175.213 136.607 174.965 136.707 174.916 136.807 cv
174.705 137.253 174.73 138.791 174.73 139.361 cv
174.73 142.326 li
cp
f
184.178 143.17 mo
184.178 143.666 184.253 143.964 184.477 144.051 cv
184.514 144.088 184.514 144.163 184.464 144.2 cv
184.315 144.2 184.091 144.249 183.856 144.312 cv
183.198 144.485 182.306 144.634 181.635 144.634 cv
180.159 144.634 178.807 144.225 177.852 143.257 cv
177.107 142.513 176.71 141.532 176.71 140.44 cv
176.71 139.387 177.058 138.319 177.826 137.501 cv
178.657 136.633 179.886 136.05 181.759 136.05 cv
182.466 136.05 183.124 136.186 183.335 136.235 cv
183.57 136.285 183.955 136.372 184.104 136.348 cv
184.104 136.757 184.178 137.401 184.29 138.146 cv
184.253 138.245 184.029 138.258 183.955 138.184 cv
183.608 136.844 182.677 136.422 181.412 136.422 cv
179.005 136.422 177.95 138.134 177.95 139.994 cv
177.95 142.376 179.18 144.249 181.672 144.249 cv
182.441 144.249 182.9 144.088 183.037 143.877 cv
183.1 143.79 183.161 143.567 183.161 143.17 cv
183.161 142.674 li
183.161 141.632 183.124 141.558 182.355 141.471 cv
181.81 141.408 li
181.709 141.359 181.723 141.136 181.81 141.099 cv
182.168 141.123 182.852 141.136 183.583 141.136 cv
184.067 141.136 184.488 141.123 184.898 141.099 cv
184.985 141.148 184.997 141.334 184.91 141.408 cv
184.712 141.434 li
184.191 141.495 184.178 141.843 184.178 142.476 cv
184.178 143.17 li
cp
f
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%whiting.logo.small.vertical.white.eps
%
%</whiting.logo.small.vertical.white.eps>
%\fi
\endinput
